{
  "name": "AnaliziFinance",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "maxRetries": 3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1920,
        704
      ],
      "id": "5ece32b2-af30-4701-a80f-5ceaaeee6f31",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "SyI2pOUeSfbt1JRh",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "08c6bf39-0175-4ea4-b6b2-ff55962b1900",
      "name": "Telegram Bot Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -3440,
        560
      ],
      "webhookId": "b8605f3e-0f52-4ffc-a4c9-1728eb0e09e2",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "2b54b4dd-746c-4193-a52d-68bc9e10d3d8",
      "name": "Message Type Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2656,
        560
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "56af8151-e0b4-457f-825d-37821cb497dc",
      "name": "Download Voice File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -2320,
        384
      ],
      "webhookId": "8fa0a59a-be53-4897-83bb-5b18ed71b529",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "e16713aa-8d23-4371-9db5-670c77f0f7bd",
      "name": "Transcribe Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        -2112,
        384
      ],
      "credentials": {
        "openAiApi": {
          "id": "SyI2pOUeSfbt1JRh",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6af7fa1-c31a-4514-ae63-397699bf8b21",
              "name": "text",
              "value": "={{ $('Telegram Bot Trigger').first().json.message.text }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2144,
        624
      ],
      "id": "b097323e-56c4-460b-a40e-e8da167213a5",
      "name": "Prepare Text Data"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$('Telegram Bot Trigger').first().json.message.message_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -1712,
        608
      ],
      "id": "0f3cb388-fccf-4ef3-a32a-55d6d9941290",
      "name": "Conversation Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}\n\n",
        "options": {
          "systemMessage": "=Ты — финансовый помощник для бизнеса и личных финансов в Кыргызстане.\nВалюты: сом (KGS), доллар (USD), евро (EUR), рубль (RUB). Сегодняшняя дата: 30.10.2025\n\n---\n💸 РАСХОДЫ: используй инструмент Add_expense с параметрами:\n- category: продукты, транспорт, кафе/рестораны, аренда офиса, зарплата, налоги, маркетинг, канцтовары, интернет/связь, коммунальные услуги, обучение, подписки, прочее\n- amount: сумма (только число)\n- currency: валюта (KGS/сом по умолчанию, USD/доллар, EUR/евро, RUB/рубль)\n- description: описание (опционально)\n- date: DD.MM.YYYY (опционально, если не указано - будет сегодня)\n\n💰 ДОХОДЫ: используй инструмент Add_income с параметрами:\n- category: зарплата, продажи, инвестиции, подработка, кэшбек, прочее\n- amount, currency, description, date (аналогично)\n\n📊 АНАЛИЗ: используй инструмент Parsing_of_the_month с параметрами:\n- month: название месяца (например 'октябрь')\n- type: 'расход' или 'доход'\n- filter_category: опционально\n\n� КОНВЕРТАЦИЯ ВАЛЮТ:\nИспользуй инструмент Convert_currency когда пользователь просит конвертировать суммы:\n- 'Конвертируй X сом в доллары' → Convert_currency(amount: X, from_currency: 'KGS', to_currency: 'USD')\n- 'Сколько будет X USD в KGS?' → Convert_currency(amount: X, from_currency: 'USD', to_currency: 'KGS')\n- 'Переведи X евро в рубли' → Convert_currency(amount: X, from_currency: 'EUR', to_currency: 'RUB')\n\nДля запросов о курсах валют используй Get_exchange_rates:\n- 'Какой курс доллара?' → Get_exchange_rates()\n- 'Курс евро' → Get_exchange_rates()\n- 'Все курсы' → Get_exchange_rates()\n\nПри показе статистики в конкретной валюте:\n1. Получи данные через Parsing_of_the_month\n2. Для каждой транзакции в другой валюте используй Convert_currency\n3. Суммируй результаты в запрошенной валюте\n\n�📈 СТАТИСТИКА ПО ВАЛЮТАМ:\nКогда пользователь просит \"статистику по всем валютам\" или \"покажи все валюты\":\n1. Группируй данные ПО ВАЛЮТАМ (не конвертируй!)\n2. Показывай раздельно: KGS, USD, EUR, RUB\n3. Формат: \"💵 USD: расходы X, доходы Y\"\n4. НЕ конвертируй в KGS без явной просьбы\n\n---\nВАЖНО: Распознавай валюту из текста:\n- 'сом', 'сомов', 'KGS' → currency: KGS\n- 'доллар', 'долларов', '$', 'USD' → currency: USD\n- 'евро', 'EUR' → currency: EUR\n- 'рубль', 'рублей', 'RUB' → currency: RUB\n- Если валюта не указана → по умолчанию KGS\n\n✅ После успешной операции формируй читаемый ответ.\nПример: \"✅ Расход добавлен: 100 USD на 'продукты' (30.10.2025)\"\nДля конвертации: \"💱 100 USD = 8,700 KGS (по курсу 87.00)\"\n\n📝 РЕДАКТИРОВАНИЕ ТРАНЗАКЦИЙ:\nИспользуй Edit_transaction для изменения расходов/доходов. ВАЖНО: transaction_type всегда 'expense' или 'income' (НЕ 'расход'/'доход'):\n- 'Измени последний расход на 1500 сом' → Edit_transaction(transaction_id: 'last', transaction_type: 'expense', field: 'amount', new_value: '1500')\n- 'Поменяй категорию транзакции 15 на продукты' → Edit_transaction(transaction_id: '15', transaction_type: 'expense', field: 'category', new_value: 'продукты')\n- 'Измени описание последнего дохода' → Edit_transaction(transaction_id: 'last', transaction_type: 'income', field: 'description', new_value: '...')\n- Поля: 'amount', 'category', 'description', 'date', 'currency'\n\n🗑️ УДАЛЕНИЕ ТРАНЗАКЦИЙ:\nИспользуй Delete_transaction для удаления (мягкое удаление). ВАЖНО: transaction_type = 'expense' или 'income':\n- 'Удали последний расход' → Delete_transaction(transaction_id: 'last', transaction_type: 'expense')\n- 'Удали транзакцию номер 25' → Delete_transaction(transaction_id: '25', transaction_type: 'income')\n\n🔄 ВОССТАНОВЛЕНИЕ:\nИспользуй Restore_transaction для восстановления удалённых транзакций:\n- 'Верни последнюю удалённую транзакцию' → Restore_transaction(transaction_id: ID, transaction_type: 'expense')\n\n📜 ИСТОРИЯ ИЗМЕНЕНИЙ:\nИспользуй Get_transaction_history для просмотра истории изменений:\n- 'Покажи историю транзакции 15' → Get_transaction_history(transaction_id: '15', transaction_type: 'expense')\n- 'История последнего расхода' → Get_transaction_history(transaction_id: 'last', transaction_type: 'expense')\n\nДля редактирования: \"✏️ Транзакция изменена: сумма обновлена на 1,500 KGS\"\nДля удаления: \"🗑️ Транзакция удалена (можно восстановить)\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -1616,
        256
      ],
      "id": "f6f80ca7-f56d-446e-8349-217399bf55f5",
      "name": "Financial Assistant",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Bot Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "reply_to_message_id": "={{ $('Telegram Bot Trigger').first().json.message.message_id }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -576,
        64
      ],
      "id": "2358802e-ef52-4ae4-8109-e354e5e58545",
      "name": "Send Telegram Response",
      "webhookId": "a2f9609c-4b7a-4d51-aaa6-c889f56aefc9",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH monthly_data AS (\n  SELECT \n    category,\n    COUNT(*) as transaction_count,\n    SUM(amount) as total_amount,\n    AVG(amount) as avg_amount\n  FROM income\n  WHERE user_id = {{ $json.user_id }}\n    AND TO_CHAR(date, 'YYYY-MM') = '{{ $json.year_month }}'\n    {{ $json.category ? \"AND category = '\" + $json.category + \"'\" : \"\" }}\n  GROUP BY category\n  ORDER BY total_amount DESC\n)\nSELECT \n  *,\n  (SELECT SUM(total_amount) FROM monthly_data) as grand_total\nFROM monthly_data;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1312,
        1152
      ],
      "id": "dbf117bd-78cc-4cb2-80c1-e08a8de732dc",
      "name": "Анализ доходов",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9af39ade-d2ac-4587-b4cd-bccb18fece32",
              "leftValue": "={{ $json.type }}",
              "rightValue": "расход",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1664,
        1072
      ],
      "id": "5c2c08ec-5d19-486c-8356-0033a6f970aa",
      "name": "Проверка типа"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH monthly_data AS (\n  SELECT \n    category,\n    COUNT(*) as transaction_count,\n    SUM(amount) as total_amount,\n    AVG(amount) as avg_amount\n  FROM expenses\n  WHERE user_id = {{ $json.user_id }}\n    AND TO_CHAR(date, 'YYYY-MM') = '{{ $json.year_month }}'\n    {{ $json.category ? \"AND category = '\" + $json.category + \"'\" : \"\" }}\n  GROUP BY category\n  ORDER BY total_amount DESC\n)\nSELECT \n  *,\n  (SELECT SUM(total_amount) FROM monthly_data) as grand_total\nFROM monthly_data;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1312,
        1008
      ],
      "id": "f74d29f4-67ad-477e-89d4-e47a5cf7be2b",
      "name": "Анализ расходов",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO users (user_id, username, first_name, last_name, telegram_chat_id)\nVALUES (\n  {{ $json.message.from.id }},\n  '{{ $json.message.from.username || \"\" }}',\n  '{{ $json.message.from.first_name || \"\" }}',\n  '{{ $json.message.from.last_name || \"\" }}',\n  {{ $json.message.chat.id }}\n)\nON CONFLICT (user_id) \nDO UPDATE SET \n  username = EXCLUDED.username,\n  last_activity = NOW()\nRETURNING *;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -3184,
        576
      ],
      "id": "beeede9f-78f3-453c-bfc8-3048ab2b300a",
      "name": "Регистрация/обновление пользователя",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cb77ab8-f045-4576-b673-6ead0a3a5da6",
              "name": "message",
              "value": "={{ $node[\"Telegram Bot Trigger\"].json[\"message\"] || {} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2960,
        560
      ],
      "id": "c33b6a13-7197-4a1c-92b4-06a0ae940114",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "name": "Add_income",
        "description": "=Добавляет доход в базу. Категории: зарплата, продажи, инвестиции, подработка, кэшбек, прочее. Валюты: сом/KGS, доллар/USD, евро/EUR, рубль/RUB. Вызывай с параметрами: category (обязательно), amount (обязательно), currency (опционально, по умолчанию KGS), description (опционально), date (опционально, формат DD.MM.YYYY, по умолчанию сегодня)",
        "operation": "executeQuery",
        "query": "=INSERT INTO income (user_id, date, category, amount, currency, description, operation_type, source)\nVALUES (\n  1109421300,\n  COALESCE(\n    TO_DATE('{{ $fromAI(\"date\", \"Дата операции в формате DD.MM.YYYY, если не указана то пустая строка\", \"string\", \"\") }}', 'DD.MM.YYYY'),\n    CURRENT_DATE\n  ),\n  '{{ $fromAI(\"category\", \"Категория дохода: зарплата, продажи, инвестиции, подработка, кэшбек, прочее\", \"string\") }}',\n  {{ $fromAI(\"amount\", \"Сумма дохода, только число\", \"number\") }},\n  UPPER('{{ $fromAI(\"currency\", \"Валюта: сом/KGS, доллар/USD, евро/EUR, рубль/RUB. Если не указана - KGS\", \"string\", \"KGS\") }}'),\n  '{{ $fromAI(\"description\", \"Описание дохода, если есть\", \"string\", \"\") }}',\n  'доход',\n  'telegram'\n)\nRETURNING id, TO_CHAR(date, 'DD.MM.YYYY') as date, category, amount, currency, description;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -1520,
        720
      ],
      "id": "60a4aa55-2039-405f-b04d-cca8c107caa6",
      "name": "Add_income",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Parsing_of_the_month",
        "description": "=Анализирует расходы или доходы за указанный месяц. Вызывай с параметрами: month (название месяца на русском, например 'октябрь'), type ('расход' или 'доход'), category (опционально, фильтр по категории)",
        "operation": "executeQuery",
        "query": "=WITH month_mapping AS (\n  SELECT * FROM (VALUES\n    ('январь', 1), ('февраль', 2), ('март', 3), ('апрель', 4),\n    ('май', 5), ('июнь', 6), ('июль', 7), ('август', 8),\n    ('сентябрь', 9), ('октябрь', 10), ('ноябрь', 11), ('декабрь', 12)\n  ) AS m(month_name, month_num)\n),\nfiltered_data AS (\n  SELECT\n    TO_CHAR(t.date, 'DD.MM.YYYY') as date,\n    t.category,\n    t.amount,\n    COALESCE(t.description, '') as description\n  FROM {{ $fromAI(\"type\", \"Тип операции: 'расход' или 'доход'\", \"string\") === 'расход' ? 'expenses' : 'income' }} t\n  INNER JOIN month_mapping mm ON EXTRACT(MONTH FROM t.date) = mm.month_num\n  WHERE t.user_id = 1109421300\n    AND EXTRACT(YEAR FROM t.date) = EXTRACT(YEAR FROM CURRENT_DATE)\n    AND LOWER(mm.month_name) = LOWER('{{ $fromAI(\"month\", \"Название месяца на русском языке (например: октябрь, ноябрь)\", \"string\") }}')\n    AND (NULLIF('{{ $fromAI(\"filter_category\", \"Категория для фильтрации опционально\", \"string\", \"\") }}', '') IS NULL OR t.category = '{{ $fromAI(\"filter_category\", \"Категория для фильтрации опционально\", \"string\", \"\") }}')\n)\nSELECT \n  *,\n  (SELECT COUNT(*) FROM filtered_data) as total_rows,\n  (SELECT SUM(amount) FROM filtered_data) as total_amount\nFROM filtered_data\nORDER BY date DESC;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -1360,
        752
      ],
      "id": "f64b49d6-b13c-4b82-a116-1b228797a435",
      "name": "Parsing_of_the_month",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Add_expense",
        "description": "=Добавляет расход в базу. Категории: продукты, транспорт, кафе/рестораны, аренда офиса, зарплата, налоги, маркетинг, канцтовары, интернет/связь, коммунальные услуги, обучение, подписки, прочее. Валюты: сом/KGS, доллар/USD, евро/EUR, рубль/RUB. Вызывай с параметрами: category (обязательно), amount (обязательно), currency (опционально, по умолчанию KGS), description (опционально), date (опционально, формат DD.MM.YYYY, по умолчанию сегодня)",
        "operation": "executeQuery",
        "query": "=INSERT INTO expenses (user_id, date, category, amount, currency, description, operation_type, source)\nVALUES (\n  1109421300,\n  COALESCE(\n    TO_DATE('{{ $fromAI(\"date\", \"Дата операции в формате DD.MM.YYYY, если не указана то пустая строка\", \"string\", \"\") }}', 'DD.MM.YYYY'),\n    CURRENT_DATE\n  ),\n  '{{ $fromAI(\"category\", \"Категория расхода: продукты, транспорт, кафе/рестораны, аренда офиса, зарплата, налоги, маркетинг, канцтовары, интернет/связь, коммунальные услуги, обучение, подписки, прочее\", \"string\") }}',\n  {{ $fromAI(\"amount\", \"Сумма расхода, только число\", \"number\") }},\n  UPPER('{{ $fromAI(\"currency\", \"Валюта: сом/KGS, доллар/USD, евро/EUR, рубль/RUB. Если не указана - KGS\", \"string\", \"KGS\") }}'),\n  '{{ $fromAI(\"description\", \"Описание расхода, если есть\", \"string\", \"\") }}',\n  'расход',\n  'telegram'\n)\nRETURNING id, TO_CHAR(date, 'DD.MM.YYYY') as date, category, amount, currency, description;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -920,
        704
      ],
      "id": "53489835-a4fa-499d-bc6f-c544cf2cd85d",
      "name": "Add_expense",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Проверка лимита по категории\nWITH expense_sum AS (\n  SELECT COALESCE(SUM(amount), 0) as total_spent\n  FROM expenses\n  WHERE user_id = {{ $json.user_id }}\n    AND category = '{{ $json.category }}'\n    AND date >= DATE_TRUNC('month', CURRENT_DATE)\n),\ncategory_limit AS (\n  SELECT limit_amount\n  FROM limits\n  WHERE user_id = {{ $json.user_id }}\n    AND category = '{{ $json.category }}'\n    AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM')\n  LIMIT 1\n)\nSELECT \n  e.total_spent,\n  l.limit_amount,\n  CASE \n    WHEN l.limit_amount IS NULL THEN NULL\n    WHEN e.total_spent > l.limit_amount THEN 'exceeded'\n    WHEN e.total_spent > (l.limit_amount * 0.8) THEN 'warning'\n    ELSE 'ok'\n  END as limit_status,\n  CASE\n    WHEN l.limit_amount IS NOT NULL THEN ROUND((e.total_spent / l.limit_amount) * 100)\n    ELSE NULL\n  END as percent_used\nFROM expense_sum e\nLEFT JOIN category_limit l ON true;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -944,
        864
      ],
      "id": "2aae980b-ec4a-45eb-abc1-66ff0597e0a7",
      "name": "Checking_limits",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        -720,
        448
      ],
      "id": "1fd0a6ac-be73-4e0c-9e1a-5442b3611cdf",
      "name": "Calc"
    },
    {
      "parameters": {
        "name": "Convert_currency",
        "description": "=Конвертирует сумму из одной валюты в другую по актуальному курсу. Поддерживаемые валюты: KGS (сом), USD (доллар), EUR (евро), RUB (рубль). Вызывай с параметрами: amount (сумма для конвертации), from_currency (из какой валюты), to_currency (в какую валюту). Примеры: 'Конвертируй 1000 сом в доллары', 'Сколько будет 100 USD в KGS', 'Переведи 50 евро в рубли'",
        "operation": "executeQuery",
        "query": "=WITH conversion AS (\n  SELECT \n    {{ $fromAI(\"amount\", \"Сумма для конвертации, только число\", \"number\") }} as original_amount,\n    UPPER('{{ $fromAI(\"from_currency\", \"Из какой валюты конвертировать: сом/KGS, доллар/USD, евро/EUR, рубль/RUB\", \"string\") }}') as from_currency,\n    UPPER('{{ $fromAI(\"to_currency\", \"В какую валюту конвертировать: сом/KGS, доллар/USD, евро/EUR, рубль/RUB\", \"string\") }}') as to_currency,\n    get_exchange_rate(\n      UPPER('{{ $fromAI(\"from_currency\", \"Из какой валюты конвертировать: сом/KGS, доллар/USD, евро/EUR, рубль/RUB\", \"string\") }}'),\n      UPPER('{{ $fromAI(\"to_currency\", \"В какую валюту конвертировать: сом/KGS, доллар/USD, евро/EUR, рубль/RUB\", \"string\") }}'),\n      CURRENT_DATE\n    ) as rate\n)\nSELECT \n  original_amount,\n  from_currency,\n  to_currency,\n  rate,\n  ROUND(original_amount * rate, 2) as converted_amount,\n  CURRENT_DATE as conversion_date\nFROM conversion;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -1200,
        560
      ],
      "id": "convert-currency-tool-id",
      "name": "Convert_currency",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Get_exchange_rates",
        "description": "=Получает актуальные курсы валют на сегодня. Показывает курсы между KGS (сом), USD (доллар), EUR (евро), RUB (рубль). Используй когда пользователь спрашивает 'Какой курс доллара?', 'Курс евро', 'Все курсы валют'",
        "operation": "executeQuery",
        "query": "=SELECT \n  from_currency,\n  to_currency,\n  rate,\n  TO_CHAR(date, 'DD.MM.YYYY') as rate_date,\n  source\nFROM v_latest_rates\nWHERE from_currency IN ('KGS', 'USD', 'EUR', 'RUB')\n  AND to_currency IN ('KGS', 'USD', 'EUR', 'RUB')\n  AND from_currency != to_currency\nORDER BY from_currency, to_currency;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -1040,
        560
      ],
      "id": "get-rates-tool-id",
      "name": "Get_exchange_rates",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Edit_transaction",
        "description": "=Редактирует существующую транзакцию (расход или доход). Можно изменить сумму, категорию, описание, дату или валюту. Используй когда пользователь просит: 'Измени последний расход на 1500', 'Исправь категорию на транспорт', 'Поменяй дату расхода'. Параметры: transaction_type ('expense' или 'income'), transaction_id (ID транзакции или 'last' для последней), field (что менять: 'amount', 'category', 'description', 'date', 'currency'), new_value (новое значение)",
        "operation": "executeQuery",
        "query": "=SELECT * FROM safe_update_transaction(\n  {{ $('Telegram Bot Trigger').first().json.message.from.id }},\n  '{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}',\n  '{{ $fromAI(\"transaction_id\", \"ID транзакции или 'last' для последней\", \"string\") }}',\n  '{{ $fromAI(\"field\", \"Поле для изменения: amount, category, description, date, currency\", \"string\") }}',\n  '{{ $fromAI(\"new_value\", \"Новое значение\", \"string\") }}'\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -880,
        560
      ],
      "id": "edit-transaction-tool-id",
      "name": "Edit_transaction",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Delete_transaction",
        "description": "=Удаляет транзакцию (расход или доход) методом soft delete. Транзакция помечается как удалённая, но остаётся в базе. Используй когда пользователь просит: 'Удали последний расход', 'Удали транзакцию 15', 'Убери расход на 1500'. Параметры: transaction_type ('expense' или 'income'), transaction_id (ID или 'last')",
        "operation": "executeQuery",
        "query": "=WITH found_transaction AS (\n  SELECT \n    CASE \n      WHEN LOWER('{{ $fromAI(\"transaction_id\", \"ID транзакции или 'last' для последней\", \"string\") }}') = 'last' \n      THEN get_last_transaction({{ $('Telegram Bot Trigger').first().json.message.from.id }}, LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}'))\n      ELSE CAST(NULLIF('{{ $fromAI(\"transaction_id\", \"ID транзакции или 'last' для последней\", \"string\") }}', 'last') AS INTEGER)\n    END as tid\n),\ndelete_expense AS (\n  UPDATE expenses\n  SET deleted_at = NOW(),\n      deleted_by = {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n  WHERE id = (SELECT tid FROM found_transaction)\n    AND user_id = {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n    AND deleted_at IS NULL\n    AND LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}') = 'expense'\n  RETURNING id, amount, category, currency, date\n),\ndelete_income AS (\n  UPDATE income\n  SET deleted_at = NOW(),\n      deleted_by = {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n  WHERE id = (SELECT tid FROM found_transaction)\n    AND user_id = {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n    AND deleted_at IS NULL\n    AND LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}') = 'income'\n  RETURNING id, amount, category, currency, date\n),\nlog_deletion AS (\n  SELECT log_transaction_change(\n    LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}'),\n    (SELECT tid FROM found_transaction),\n    'deleted',\n    NULL,\n    NULL,\n    NULL,\n    {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n  ) as history_id\n)\nSELECT \n  COALESCE(\n    (SELECT row_to_json(delete_expense.*) FROM delete_expense),\n    (SELECT row_to_json(delete_income.*) FROM delete_income)\n  ) as deleted_transaction,\n  (SELECT history_id FROM log_deletion) as history_id,\n  'deleted' as status;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -720,
        560
      ],
      "id": "delete-transaction-tool-id",
      "name": "Delete_transaction",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Restore_transaction",
        "description": "=Восстанавливает удалённую транзакцию. Используй когда пользователь просит: 'Верни последний удалённый расход', 'Восстанови транзакцию 15'. Параметры: transaction_type ('expense' или 'income'), transaction_id (ID транзакции)",
        "operation": "executeQuery",
        "query": "=WITH found_transaction AS (\n  SELECT \n    CASE \n      WHEN LOWER('{{ $fromAI(\"transaction_id\", \"ID удалённой транзакции или 'last'\", \"string\") }}') = 'last' \n      THEN get_last_transaction({{ $('Telegram Bot Trigger').first().json.message.from.id }}, LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}'))\n      ELSE CAST(NULLIF('{{ $fromAI(\"transaction_id\", \"ID удалённой транзакции или 'last'\", \"string\") }}', 'last') AS INTEGER)\n    END as tid\n),\nrestore_expense AS (\n  UPDATE expenses\n  SET deleted_at = NULL,\n      deleted_by = NULL\n  WHERE id = (SELECT tid FROM found_transaction)\n    AND user_id = {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n    AND deleted_at IS NOT NULL\n    AND LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}') = 'expense'\n  RETURNING id, amount, category, currency, date\n),\nrestore_income AS (\n  UPDATE income\n  SET deleted_at = NULL,\n      deleted_by = NULL\n  WHERE id = (SELECT tid FROM found_transaction)\n    AND user_id = {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n    AND deleted_at IS NOT NULL\n    AND LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}') = 'income'\n  RETURNING id, amount, category, currency, date\n),\nlog_restore AS (\n  SELECT log_transaction_change(\n    LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}'),\n    (SELECT tid FROM found_transaction),\n    'restored',\n    NULL,\n    NULL,\n    NULL,\n    {{ $('Telegram Bot Trigger').first().json.message.from.id }}\n  ) as history_id\n)\nSELECT \n  COALESCE(\n    (SELECT row_to_json(restore_expense.*) FROM restore_expense),\n    (SELECT row_to_json(restore_income.*) FROM restore_income)\n  ) as restored_transaction,\n  (SELECT history_id FROM log_restore) as history_id,\n  'restored' as status;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -560,
        560
      ],
      "id": "restore-transaction-tool-id",
      "name": "Restore_transaction",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "name": "Get_transaction_history",
        "description": "=Показывает историю изменений транзакции (audit log). Используй когда пользователь просит: 'Покажи историю изменений транзакции 15', 'Что менялось в последнем расходе?'. Параметры: transaction_type ('expense' или 'income'), transaction_id (ID транзакции или 'last')",
        "operation": "executeQuery",
        "query": "=WITH found_transaction AS (\n  SELECT \n    CASE \n      WHEN LOWER('{{ $fromAI(\"transaction_id\", \"ID транзакции или 'last'\", \"string\") }}') = 'last' \n      THEN get_last_transaction({{ $('Telegram Bot Trigger').first().json.message.from.id }}, LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}'))\n      ELSE CAST(NULLIF('{{ $fromAI(\"transaction_id\", \"ID транзакции или 'last'\", \"string\") }}', 'last') AS INTEGER)\n    END as tid\n)\nSELECT \n  id,\n  action,\n  field_changed,\n  old_value,\n  new_value,\n  changed_by,\n  TO_CHAR(changed_at, 'DD.MM.YYYY HH24:MI:SS') as changed_at\nFROM transaction_history\nWHERE transaction_type = LOWER('{{ $fromAI(\"transaction_type\", \"Тип: expense или income\", \"string\") }}')\n  AND transaction_id = (SELECT tid FROM found_transaction)\nORDER BY changed_at DESC\nLIMIT 50;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        -400,
        560
      ],
      "id": "get-history-tool-id",
      "name": "Get_transaction_history",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Bot Trigger": {
      "main": [
        [
          {
            "node": "Регистрация/обновление пользователя",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type Switch": {
      "main": [
        [
          {
            "node": "Download Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Text Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Voice File": {
      "main": [
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Financial Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Data": {
      "main": [
        [
          {
            "node": "Financial Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Financial Assistant": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка типа": {
      "main": [
        [
          {
            "node": "Анализ расходов",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Анализ доходов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Регистрация/обновление пользователя": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Message Type Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Income_preparation": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add_income": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Parsing_of_the_month": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Adding_expenses": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add_expense": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Checking_limits": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calc": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Convert_currency": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get_exchange_rates": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit_transaction": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Delete_transaction": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Restore_transaction": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get_transaction_history": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cc297564-5f30-4183-8b99-d9f5b2b7a00d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bcdca7003a882ee2cf9d975eab94cc02ba456a1ed2ac37511421cb2edeb80c62"
  },
  "id": "poGBTuaN7LQs9hwD",
  "tags": []
}