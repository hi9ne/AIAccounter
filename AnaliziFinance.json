{
  "name": "AnaliziFinance",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {
          "maxRetries": 3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        480,
        384
      ],
      "id": "f8e37618-2ff3-422c-94cb-cec0098950ec",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "SyI2pOUeSfbt1JRh",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "1df29445-94b2-4b64-818b-33dc93075126",
      "name": "Telegram Bot Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        -1040,
        240
      ],
      "webhookId": "b8605f3e-0f52-4ffc-a4c9-1728eb0e09e2",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.voice.file_id }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Voice"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8c844924-b2ed-48b0-935c-c66a8fd0c778",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "exists",
                      "singleValue": true
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            }
          ]
        },
        "options": {}
      },
      "id": "b85dc963-107d-4b49-8b5d-2003486f3bd4",
      "name": "Message Type Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -256,
        240
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $json.message.voice.file_id }}",
        "additionalFields": {}
      },
      "id": "51c7b02f-effd-4526-9bb8-7828748e36d3",
      "name": "Download Voice File",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        80,
        64
      ],
      "webhookId": "8fa0a59a-be53-4897-83bb-5b18ed71b529",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "id": "19ee7ab7-a2d9-4d1d-b09b-3d8ba96889a2",
      "name": "Transcribe Audio",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        288,
        64
      ],
      "credentials": {
        "openAiApi": {
          "id": "SyI2pOUeSfbt1JRh",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d6af7fa1-c31a-4514-ae63-397699bf8b21",
              "name": "text",
              "value": "={{ $('Telegram Bot Trigger').first().json.message.text }}",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        256,
        304
      ],
      "id": "69730705-012a-4259-a381-812ebb1c129f",
      "name": "Prepare Text Data"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$('Telegram Bot Trigger').first().json.message.message_id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        688,
        288
      ],
      "id": "ede32e23-cb3c-4655-a03d-53f93af7bbf9",
      "name": "Conversation Memory"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.text }}\n\n",
        "options": {
          "systemMessage": "=\n–¢—ã ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ.\n–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö, –¥–æ—Ö–æ–¥–∞—Ö, –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏.\n–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–æ–º (KGS)\n–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ {{ new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Bishkek', day: '2-digit', month: '2-digit', year: 'numeric' }) }}\n\n---\nüí∏ –†–ê–°–•–û–î–´: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ —Ç—Ä–∞—Ç—É/–ø–æ–∫—É–ø–∫—É\n–í—ã–∑—ã–≤–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Add_expense –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç:\n{\n  \"date\": \"–î–î.–ú–ú.–ì–ì–ì–ì\",\n  \"category\": \"...\",\n  \"amount\": ... ,\n  \"description\": \"...\",\n  \"operation_type\": \"—Ä–∞—Å—Ö–æ–¥\",\n  \"source\": \"telegram\"\n}\n\nüí∞ –î–û–•–û–î–´: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥\n–í—ã–∑—ã–≤–∞–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Add_income –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç:\n{\n  \"date\": \"–î–î.–ú–ú.–ì–ì–ì–ì\",\n  \"category\": \"...\",\n  \"amount\": ... ,\n  \"description\": \"...\",\n  \"operation_type\": \"–¥–æ—Ö–æ–¥\",\n  \"source\": \"telegram\"\n}\n\n---\n–í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –æ–±—ä–µ–∫—Ç —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É. –ù–ï –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏–µ –ø–æ–ª—è.\n\n‚úÖ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è, –≤–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ Telegram:\n\"–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞: [–¥–∞–Ω–Ω—ã–µ]\"\n–∏–ª–∏\n\"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω: [—Ä–µ–∑—É–ª—å—Ç–∞—Ç]\"\n\n...existing code..."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        784,
        -64
      ],
      "id": "aaa00d7e-6fa3-40ab-8eed-4f1aae4424ea",
      "name": "Financial Assistant",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Bot Trigger').first().json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false,
          "reply_to_message_id": "={{ $('Telegram Bot Trigger').first().json.message.message_id }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1824,
        -256
      ],
      "id": "78a5fef3-decd-4bc1-9906-255676655d7f",
      "name": "Send Telegram Response",
      "webhookId": "a2f9609c-4b7a-4d51-aaa6-c889f56aefc9",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH monthly_data AS (\n  SELECT \n    category,\n    COUNT(*) as transaction_count,\n    SUM(amount) as total_amount,\n    AVG(amount) as avg_amount\n  FROM income\n  WHERE user_id = {{ $json.user_id }}\n    AND TO_CHAR(date, 'YYYY-MM') = '{{ $json.year_month }}'\n    {{ $json.category ? \"AND category = '\" + $json.category + \"'\" : \"\" }}\n  GROUP BY category\n  ORDER BY total_amount DESC\n)\nSELECT \n  *,\n  (SELECT SUM(total_amount) FROM monthly_data) as grand_total\nFROM monthly_data;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1088,
        832
      ],
      "id": "7f51d030-328a-40b3-9abf-6042f126f09f",
      "name": "–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "9af39ade-d2ac-4587-b4cd-bccb18fece32",
              "leftValue": "={{ $json.type }}",
              "rightValue": "—Ä–∞—Å—Ö–æ–¥",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        736,
        752
      ],
      "id": "894a5626-98ca-439e-943b-56cbabc84562",
      "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH monthly_data AS (\n  SELECT \n    category,\n    COUNT(*) as transaction_count,\n    SUM(amount) as total_amount,\n    AVG(amount) as avg_amount\n  FROM expenses\n  WHERE user_id = {{ $json.user_id }}\n    AND TO_CHAR(date, 'YYYY-MM') = '{{ $json.year_month }}'\n    {{ $json.category ? \"AND category = '\" + $json.category + \"'\" : \"\" }}\n  GROUP BY category\n  ORDER BY total_amount DESC\n)\nSELECT \n  *,\n  (SELECT SUM(total_amount) FROM monthly_data) as grand_total\nFROM monthly_data;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1088,
        688
      ],
      "id": "3ff919d2-cbd5-4428-a7e3-9712217054e4",
      "name": "–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO users (user_id, username, first_name, last_name, telegram_chat_id)\nVALUES (\n  {{ $json.message.from.id }},\n  '{{ $json.message.from.username || \"\" }}',\n  '{{ $json.message.from.first_name || \"\" }}',\n  '{{ $json.message.from.last_name || \"\" }}',\n  {{ $json.message.chat.id }}\n)\nON CONFLICT (user_id) \nDO UPDATE SET \n  username = EXCLUDED.username,\n  last_activity = NOW()\nRETURNING *;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -784,
        256
      ],
      "id": "d3996e68-eade-4127-80c1-7e3a96babcd9",
      "name": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6cb77ab8-f045-4576-b673-6ead0a3a5da6",
              "name": "message",
              "value": "={{ $node[\"Telegram Bot Trigger\"].json[\"message\"] || {} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -560,
        240
      ],
      "id": "59ff761a-86d1-42b2-a318-370ebca3d854",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const dateStr = $fromAI('date');\nconst [day, month, year] = dateStr.split('.');\nconst sqlDate = `${year}-${month}-${day}`;\n\nconst userId = $node[\"Telegram Bot Trigger\"].json[\"message\"][\"from\"][\"id\"];\n\nreturn {\n  json: {\n    user_id: userId,\n    date: sqlDate,\n    category: $fromAI('category'),\n    amount: parseFloat($fromAI('amount')),\n    description: $fromAI('description') || '',\n    operation_type: '–¥–æ—Ö–æ–¥',\n    source: 'telegram'\n  }\n};"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        720,
        544
      ],
      "id": "29baab3b-8986-4c97-98b3-95108c4d6cd6",
      "name": "Income_preparation"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO income (user_id, date, category, amount, description, operation_type, source)\nVALUES (\n  {{ $json.user_id }},\n  '{{ $json.date }}',\n  '{{ $json.category }}',\n  {{ $json.amount }},\n  '{{ $json.description }}',\n  '–¥–æ—Ö–æ–¥',\n  'telegram'\n)\nRETURNING id, date, category, amount, description;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        880,
        400
      ],
      "id": "3cf76964-b9a8-435e-995b-ab592df55bb5",
      "name": "Add_income",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –≤ –Ω–æ–º–µ—Ä\nconst monthNames = {\n  '—è–Ω–≤–∞—Ä—å': '01', '—Ñ–µ–≤—Ä–∞–ª—å': '02', '–º–∞—Ä—Ç': '03',\n  '–∞–ø—Ä–µ–ª—å': '04', '–º–∞–π': '05', '–∏—é–Ω—å': '06',\n  '–∏—é–ª—å': '07', '–∞–≤–≥—É—Å—Ç': '08', '—Å–µ–Ω—Ç—è–±—Ä—å': '09',\n  '–æ–∫—Ç—è–±—Ä—å': '10', '–Ω–æ—è–±—Ä—å': '11', '–¥–µ–∫–∞–±—Ä—å': '12'\n};\n\nconst month = $fromAI('month').toLowerCase();\nconst monthNum = monthNames[month] || '10';\nconst year = new Date().getFullYear();\nconst yearMonth = `${year}-${monthNum}`;\n\nconst userId = $node[\"Telegram Bot Trigger\"].json[\"message\"][\"from\"][\"id\"];\nconst type = $fromAI('type'); // \"–¥–æ—Ö–æ–¥\" –∏–ª–∏ \"—Ä–∞—Å—Ö–æ–¥\"\nconst category = $fromAI('category') || null;\n\nreturn {\n  json: {\n    user_id: userId,\n    year_month: yearMonth,\n    type: type,\n    category: category,\n    month_name: month\n  }\n};"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1040,
        432
      ],
      "id": "01451097-bc4f-473d-ab79-f32706fcbb50",
      "name": "Parsing_of_the_month"
    },
    {
      "parameters": {
        "description": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞",
        "jsCode": "const dateStr = $fromAI('date');\nconst [day, month, year] = dateStr.split('.');\nconst sqlDate = `${year}-${month}-${day}`;\nconst userId = $node[\"Telegram Bot Trigger\"].json[\"message\"][\"from\"][\"id\"];\n\nreturn {\n  json: {\n    user_id: userId,\n    date: sqlDate,\n    category: $fromAI('category'),\n    amount: parseFloat($fromAI('amount')),\n    description: $fromAI('description') || ''\n  }\n};"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.3,
      "position": [
        1424,
        208
      ],
      "id": "39be6e2b-f68a-44bf-bdb1-54fe5325351d",
      "name": "Adding_expenses"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO expenses (user_id, date, category, amount, description, operation_type, source)\nVALUES (\n  {{ $json.user_id }},\n  '{{ $json.date }}',\n  '{{ $json.category }}',\n  {{ $json.amount }},\n  '{{ $json.description }}',\n  '—Ä–∞—Å—Ö–æ–¥',\n  'telegram'\n)\nRETURNING id, date, category, amount, description;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1456,
        384
      ],
      "id": "075b2356-2d19-45e8-b590-019fd85a8f1c",
      "name": "Add_expense",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\nWITH expense_sum AS (\n  SELECT COALESCE(SUM(amount), 0) as total_spent\n  FROM expenses\n  WHERE user_id = {{ $json.user_id }}\n    AND category = '{{ $json.category }}'\n    AND date >= DATE_TRUNC('month', CURRENT_DATE)\n),\ncategory_limit AS (\n  SELECT limit_amount\n  FROM limits\n  WHERE user_id = {{ $json.user_id }}\n    AND category = '{{ $json.category }}'\n    AND month = TO_CHAR(CURRENT_DATE, 'YYYY-MM')\n  LIMIT 1\n)\nSELECT \n  e.total_spent,\n  l.limit_amount,\n  CASE \n    WHEN l.limit_amount IS NULL THEN NULL\n    WHEN e.total_spent > l.limit_amount THEN 'exceeded'\n    WHEN e.total_spent > (l.limit_amount * 0.8) THEN 'warning'\n    ELSE 'ok'\n  END as limit_status,\n  CASE\n    WHEN l.limit_amount IS NOT NULL THEN ROUND((e.total_spent / l.limit_amount) * 100)\n    ELSE NULL\n  END as percent_used\nFROM expense_sum e\nLEFT JOIN category_limit l ON true;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1408,
        528
      ],
      "id": "cf475125-1e99-4380-a615-2d01a4bf3326",
      "name": "Checking_limits",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.toolCalculator",
      "typeVersion": 1,
      "position": [
        1680,
        128
      ],
      "id": "8d93eeaa-840d-4786-a199-4eba78336814",
      "name": "Calc"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1184,
        496
      ],
      "id": "6780b7ce-8eb9-4caf-a197-78d77b58b8ce",
      "name": "AI Agent"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Bot Trigger": {
      "main": [
        [
          {
            "node": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message Type Switch": {
      "main": [
        [
          {
            "node": "Download Voice File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Text Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Voice File": {
      "main": [
        [
          {
            "node": "Transcribe Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transcribe Audio": {
      "main": [
        [
          {
            "node": "Financial Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Text Data": {
      "main": [
        [
          {
            "node": "Financial Assistant",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversation Memory": {
      "ai_memory": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Financial Assistant": {
      "main": [
        [
          {
            "node": "Send Telegram Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞": {
      "main": [
        [
          {
            "node": "–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "–ê–Ω–∞–ª–∏–∑ –¥–æ—Ö–æ–¥–æ–≤",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Message Type Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Income_preparation": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add_income": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Parsing_of_the_month": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Adding_expenses": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Add_expense": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Checking_limits": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Calc": {
      "ai_tool": [
        [
          {
            "node": "Financial Assistant",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9b35a556-9d2a-4f43-b695-ab9168b2ab78",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bcdca7003a882ee2cf9d975eab94cc02ba456a1ed2ac37511421cb2edeb80c62"
  },
  "id": "poGBTuaN7LQs9hwD",
  "tags": []
}