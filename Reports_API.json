{
  "name": "Reports API v2.4.0",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "reports-api",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "allowedMethods": "GET,POST,OPTIONS"
        }
      },
      "id": "webhook-reports",
      "name": "Webhook Reports API",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        250,
        400
      ],
      "webhookId": "reports-api-v2.4.0"
    },
    {
      "parameters": {
        "jsCode": "// Extract body from webhook payload\nreturn $input.item.json.body || $input.item.json;"
      },
      "id": "extract_body_reports",
      "name": "Extract Body",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        350,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "equals",
              "value2": "generate_pdf"
            }
          ]
        }
      },
      "id": "switch-generate-pdf",
      "name": "Generate PDF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        450,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "equals",
              "value2": "generate_excel"
            }
          ]
        }
      },
      "id": "switch-generate-excel",
      "name": "Generate Excel",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        450,
        400
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "equals",
              "value2": "generate_csv"
            }
          ]
        }
      },
      "id": "switch-generate-csv",
      "name": "Generate CSV",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        450,
        600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "equals",
              "value2": "get_report"
            }
          ]
        }
      },
      "id": "switch-get-report",
      "name": "Get Report",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        450,
        800
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.action}}",
              "operation": "equals",
              "value2": "get_reports_list"
            }
          ]
        }
      },
      "id": "switch-get-reports-list",
      "name": "Get Reports List",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        450,
        1000
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_income_expense_stats(\n  {{ $json.workspaceId}}::INTEGER,\n  '{{ $json.start_date}}'::DATE,\n  '{{ $json.end_date}}'::DATE\n);",
        "options": {}
      },
      "id": "postgres-fetch-data-pdf",
      "name": "Fetch Data for PDF",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        650,
        200
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all()[0].json;\nconst workspace = $node['Webhook Reports API'].json.body;\n\n// HTML —à–∞–±–ª–æ–Ω –¥–ª—è PDF\nconst html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <style>\n    * { margin: 0; padding: 0; box-sizing: border-box; }\n    body { \n      font-family: 'Arial', sans-serif; \n      padding: 40px;\n      background: #f5f5f5;\n    }\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      background: white;\n      padding: 40px;\n      border-radius: 10px;\n      box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    }\n    .header {\n      text-align: center;\n      margin-bottom: 40px;\n      border-bottom: 3px solid #667eea;\n      padding-bottom: 20px;\n    }\n    h1 { color: #667eea; font-size: 32px; margin-bottom: 10px; }\n    .subtitle { color: #666; font-size: 14px; }\n    .stats-grid {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: 20px;\n      margin: 30px 0;\n    }\n    .stat-card {\n      padding: 20px;\n      border-radius: 8px;\n      border-left: 4px solid #667eea;\n      background: #f8f9ff;\n    }\n    .stat-label { color: #666; font-size: 12px; text-transform: uppercase; }\n    .stat-value { color: #333; font-size: 28px; font-weight: bold; margin-top: 5px; }\n    .footer {\n      margin-top: 40px;\n      padding-top: 20px;\n      border-top: 1px solid #eee;\n      text-align: center;\n      color: #999;\n      font-size: 12px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1>üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç</h1>\n      <div class=\"subtitle\">Workspace: ${workspace.workspace_name || '–õ–∏—á–Ω—ã–π –±—é–¥–∂–µ—Ç'}</div>\n      <div class=\"subtitle\">–ü–µ—Ä–∏–æ–¥: ${workspace.start_date} - ${workspace.end_date}</div>\n    </div>\n    \n    <div class=\"stats-grid\">\n      <div class=\"stat-card\">\n        <div class=\"stat-label\">üí∞ –î–æ—Ö–æ–¥—ã</div>\n        <div class=\"stat-value\">${(data.total_income || 0).toLocaleString('ru-RU')} KGS</div>\n      </div>\n      \n      <div class=\"stat-card\">\n        <div class=\"stat-label\">üí∏ –†–∞—Å—Ö–æ–¥—ã</div>\n        <div class=\"stat-value\">${(data.total_expenses || 0).toLocaleString('ru-RU')} KGS</div>\n      </div>\n      \n      <div class=\"stat-card\">\n        <div class=\"stat-label\">üìà –ë–∞–ª–∞–Ω—Å</div>\n        <div class=\"stat-value\">${((data.total_income || 0) - (data.total_expenses || 0)).toLocaleString('ru-RU')} KGS</div>\n      </div>\n      \n      <div class=\"stat-card\">\n        <div class=\"stat-label\">üî¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</div>\n        <div class=\"stat-value\">${(data.income_count || 0) + (data.expense_count || 0)}</div>\n      </div>\n    </div>\n    \n    <div class=\"footer\">\n      –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${new Date().toLocaleDateString('ru-RU')} –≤ ${new Date().toLocaleTimeString('ru-RU')}<br>\n      AIAccounter v2.4.0\n    </div>\n  </div>\n</body>\n</html>\n`;\n\nreturn { html };"
      },
      "id": "code-build-html",
      "name": "Build HTML Template",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://api.html2pdf.app/v1/generate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "html",
              "value": "={{$json.html}}"
            },
            {
              "name": "format",
              "value": "A4"
            },
            {
              "name": "landscape",
              "value": "false"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "http-generate-pdf",
      "name": "Generate PDF via API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1050,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO reports (\n  workspace_id,\n  report_type,\n  format,\n  start_date,\n  end_date,\n  file_url,\n  metadata\n) VALUES (\n  {{$node['Webhook Reports API'].json.body.workspace_id}},\n  'financial',\n  'pdf',\n  '{{$node['Webhook Reports API'].json.body.start_date}}',\n  '{{$node['Webhook Reports API'].json.body.end_date}}',\n  'https://storage.supabase.co/reports/{{$json.file_name}}',\n  '{\"generated_at\": \"{{$now.toISO()}}\"}'::JSONB\n)\nRETURNING *;",
        "options": {}
      },
      "id": "postgres-save-report-pdf",
      "name": "Save Report to DB",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1250,
        200
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, action: 'generate_pdf', report_id: $json.id, file_url: $json.file_url, format: 'pdf' } }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-pdf",
      "name": "Response PDF",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1450,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  i.date, i.category, i.amount, 'income' as type, i.description\nFROM income i\nWHERE i.workspace_id = {{ $json.workspaceId}}\n  AND i.date >= '{{ $json.start_date}}'::DATE\n  AND i.date <= '{{ $json.end_date}}'::DATE\nUNION ALL\nSELECT \n  e.date, e.category, e.amount, 'expense' as type, e.description\nFROM expenses e\nWHERE e.workspace_id = {{ $json.workspaceId}}\n  AND e.date >= '{{ $json.start_date}}'::DATE\n  AND e.date <= '{{ $json.end_date}}'::DATE\nORDER BY date DESC;",
        "options": {}
      },
      "id": "postgres-fetch-data-excel",
      "name": "Fetch Data for Excel",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        650,
        400
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst ExcelJS = require('exceljs');\n\nconst workbook = new ExcelJS.Workbook();\nconst worksheet = workbook.addWorksheet('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');\n\n// –ó–∞–≥–æ–ª–æ–≤–∫–∏\nworksheet.columns = [\n  { header: '–î–∞—Ç–∞', key: 'date', width: 15 },\n  { header: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', key: 'category', width: 20 },\n  { header: '–°—É–º–º–∞', key: 'amount', width: 15 },\n  { header: '–¢–∏–ø', key: 'type', width: 10 },\n  { header: '–û–ø–∏—Å–∞–Ω–∏–µ', key: 'description', width: 30 }\n];\n\n// –°—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞\nworksheet.getRow(1).font = { bold: true, color: { argb: 'FFFFFFFF' } };\nworksheet.getRow(1).fill = {\n  type: 'pattern',\n  pattern: 'solid',\n  fgColor: { argb: 'FF667eea' }\n};\n\n// –î–∞–Ω–Ω—ã–µ\nitems.forEach(item => {\n  const row = worksheet.addRow({\n    date: new Date(item.json.date).toLocaleDateString('ru-RU'),\n    category: item.json.category,\n    amount: item.json.amount,\n    type: item.json.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥',\n    description: item.json.description || '-'\n  });\n  \n  // –¶–≤–µ—Ç —Å—Ç—Ä–æ–∫–∏\n  if (item.json.type === 'income') {\n    row.getCell('type').fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFe7f5e9' }\n    };\n  } else {\n    row.getCell('type').fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: 'FFfdecea' }\n    };\n  }\n});\n\n// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ buffer\nconst buffer = await workbook.xlsx.writeBuffer();\n\nreturn {\n  binary: {\n    data: buffer,\n    mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    fileName: `report_${Date.now()}.xlsx`\n  }\n};"
      },
      "id": "code-build-excel",
      "name": "Build Excel File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO reports (\n  workspace_id,\n  report_type,\n  format,\n  start_date,\n  end_date,\n  file_url,\n  metadata\n) VALUES (\n  {{$node['Webhook Reports API'].json.body.workspace_id}},\n  'transactions',\n  'excel',\n  '{{$node['Webhook Reports API'].json.body.start_date}}',\n  '{{$node['Webhook Reports API'].json.body.end_date}}',\n  'https://storage.supabase.co/reports/{{$json.binary.fileName}}',\n  '{\"row_count\": {{$input.all().length}}}'::JSONB\n)\nRETURNING *;",
        "options": {}
      },
      "id": "postgres-save-report-excel",
      "name": "Save Excel Report",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1050,
        400
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, action: 'generate_excel', report_id: $json.id, file_url: $json.file_url, format: 'excel' } }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-excel",
      "name": "Response Excel",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1250,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  date, category, amount, 'income' as type, description\nFROM income\nWHERE workspace_id = {{ $json.workspaceId}}\n  AND date >= '{{ $json.start_date}}'::DATE\n  AND date <= '{{ $json.end_date}}'::DATE\nUNION ALL\nSELECT \n  date, category, amount, 'expense' as type, description\nFROM expenses\nWHERE workspace_id = {{ $json.workspaceId}}\n  AND date >= '{{ $json.start_date}}'::DATE\n  AND date <= '{{ $json.end_date}}'::DATE\nORDER BY date DESC;",
        "options": {}
      },
      "id": "postgres-fetch-data-csv",
      "name": "Fetch Data for CSV",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        650,
        600
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\n// CSV –∑–∞–≥–æ–ª–æ–≤–æ–∫\nlet csv = '–î–∞—Ç–∞,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–°—É–º–º–∞,–¢–∏–ø,–û–ø–∏—Å–∞–Ω–∏–µ\\n';\n\n// –î–∞–Ω–Ω—ã–µ\nitems.forEach(item => {\n  const date = new Date(item.json.date).toLocaleDateString('ru-RU');\n  const category = item.json.category || '-';\n  const amount = item.json.amount;\n  const type = item.json.type === 'income' ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';\n  const description = (item.json.description || '-').replace(/,/g, ';');\n  \n  csv += `${date},${category},${amount},${type},${description}\\n`;\n});\n\nreturn {\n  csv: csv,\n  fileName: `report_${Date.now()}.csv`\n};"
      },
      "id": "code-build-csv",
      "name": "Build CSV File",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        850,
        600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO reports (\n  workspace_id,\n  report_type,\n  format,\n  start_date,\n  end_date,\n  file_url,\n  metadata\n) VALUES (\n  {{$node['Webhook Reports API'].json.body.workspace_id}},\n  'transactions',\n  'csv',\n  '{{$node['Webhook Reports API'].json.body.start_date}}',\n  '{{$node['Webhook Reports API'].json.body.end_date}}',\n  'https://storage.supabase.co/reports/{{$json.fileName}}',\n  '{\"row_count\": {{$input.all().length}}}'::JSONB\n)\nRETURNING *;",
        "options": {}
      },
      "id": "postgres-save-report-csv",
      "name": "Save CSV Report",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1050,
        600
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, action: 'generate_csv', report_id: $json.id, file_url: $json.file_url, format: 'csv', csv_data: $node['Build CSV File'].json.csv } }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-csv",
      "name": "Response CSV",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1250,
        600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM reports\nWHERE id = {{$json.report_id}}\n  AND workspace_id = {{ $json.workspaceId}};",
        "options": {}
      },
      "id": "postgres-get-report",
      "name": "Get Report by ID",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        650,
        800
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, action: 'get_report', data: $json } }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-get-report",
      "name": "Response Get Report",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        850,
        800
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM reports\nWHERE workspace_id = {{ $json.workspaceId}}\nORDER BY generated_at DESC\nLIMIT {{$json.limit || 20}};",
        "options": {}
      },
      "id": "postgres-get-reports-list",
      "name": "Get Reports List",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        650,
        1000
      ],
      "credentials": {
        "postgres": {"id": "3CGZzcUsaAWp8nrl", "name": "Postgres account"}
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, action: 'get_reports_list', data: $json, count: $json.length } }}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-get-reports-list",
      "name": "Response Reports List",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        850,
        1000
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: false, error: 'Unknown action: ' + $json.action } }}",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-error",
      "name": "Response Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        650,
        1200
      ]
    }
  ],
  "connections": {
    "Webhook Reports API": {
      "main": [
        [
          {
            "node": "Extract Body",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Body": {
      "main": [
        [
          {
            "node": "Generate PDF",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Excel",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate CSV",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Reports List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PDF": {
      "main": [
        [
          {
            "node": "Fetch Data for PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Excel": {
      "main": [
        [
          {
            "node": "Fetch Data for Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate CSV": {
      "main": [
        [
          {
            "node": "Fetch Data for CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Report": {
      "main": [
        [
          {
            "node": "Get Report by ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Get Reports List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Reports List": {
      "main": [
        [
          {
            "node": "Get Reports List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Data for PDF": {
      "main": [
        [
          {
            "node": "Build HTML Template",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build HTML Template": {
      "main": [
        [
          {
            "node": "Generate PDF via API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate PDF via API": {
      "main": [
        [
          {
            "node": "Save Report to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Report to DB": {
      "main": [
        [
          {
            "node": "Response PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Data for Excel": {
      "main": [
        [
          {
            "node": "Build Excel File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Excel File": {
      "main": [
        [
          {
            "node": "Save Excel Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Excel Report": {
      "main": [
        [
          {
            "node": "Response Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Data for CSV": {
      "main": [
        [
          {
            "node": "Build CSV File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build CSV File": {
      "main": [
        [
          {
            "node": "Save CSV Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save CSV Report": {
      "main": [
        [
          {
            "node": "Response CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Report by ID": {
      "main": [
        [
          {
            "node": "Response Get Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "webhook-reports": {
      "main": [
        [
          {
            "node": "Check if OPTIONS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_options_Reports_API": {
      "main": [
        [
          {
            "node": "Response: OPTIONS",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-10-31T00:00:00.000Z",
  "versionId": "v2.4.0"
}