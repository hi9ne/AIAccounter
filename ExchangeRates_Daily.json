{
  "name": "ExchangeRates_Daily",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 10 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger-daily-rates",
      "name": "Every Day at 10:00 AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://api.exchangerate-api.com/v4/latest/KGS",
        "options": {
          "response": {
            "response": {
              "fullResponse": false,
              "neverError": false,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "http-get-rates",
      "name": "Get Exchange Rates (API)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ API\nconst rates = $input.item.json.rates;\nconst date = $input.item.json.date;\n\n// –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î\nconst exchangeRates = [];\n\n// –ö—É—Ä—Å—ã –æ—Ç KGS –∫ –¥—Ä—É–≥–∏–º –≤–∞–ª—é—Ç–∞–º\nconst currencies = ['USD', 'EUR', 'RUB'];\n\nfor (const currency of currencies) {\n  if (rates[currency]) {\n    // –ü—Ä—è–º–æ–π –∫—É—Ä—Å (KGS -> –≤–∞–ª—é—Ç–∞)\n    exchangeRates.push({\n      date: new Date().toISOString().split('T')[0],\n      from_currency: 'KGS',\n      to_currency: currency,\n      rate: rates[currency],\n      source: 'ExchangeRate-API'\n    });\n    \n    // –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–≤–∞–ª—é—Ç–∞ -> KGS)\n    exchangeRates.push({\n      date: new Date().toISOString().split('T')[0],\n      from_currency: currency,\n      to_currency: 'KGS',\n      rate: 1 / rates[currency],\n      source: 'ExchangeRate-API'\n    });\n  }\n}\n\n// –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å KGS -> KGS = 1\nexchangeRates.push({\n  date: new Date().toISOString().split('T')[0],\n  from_currency: 'KGS',\n  to_currency: 'KGS',\n  rate: 1.0,\n  source: 'SYSTEM'\n});\n\n// –ö—Ä–æ—Å—Å-–∫—É—Ä—Å—ã –º–µ–∂–¥—É USD, EUR, RUB\nif (rates.USD && rates.EUR) {\n  // USD <-> EUR\n  exchangeRates.push({\n    date: new Date().toISOString().split('T')[0],\n    from_currency: 'USD',\n    to_currency: 'EUR',\n    rate: rates.EUR / rates.USD,\n    source: 'ExchangeRate-API_CROSS'\n  });\n  exchangeRates.push({\n    date: new Date().toISOString().split('T')[0],\n    from_currency: 'EUR',\n    to_currency: 'USD',\n    rate: rates.USD / rates.EUR,\n    source: 'ExchangeRate-API_CROSS'\n  });\n}\n\nif (rates.USD && rates.RUB) {\n  // USD <-> RUB\n  exchangeRates.push({\n    date: new Date().toISOString().split('T')[0],\n    from_currency: 'USD',\n    to_currency: 'RUB',\n    rate: rates.RUB / rates.USD,\n    source: 'ExchangeRate-API_CROSS'\n  });\n  exchangeRates.push({\n    date: new Date().toISOString().split('T')[0],\n    from_currency: 'RUB',\n    to_currency: 'USD',\n    rate: rates.USD / rates.RUB,\n    source: 'ExchangeRate-API_CROSS'\n  });\n}\n\nif (rates.EUR && rates.RUB) {\n  // EUR <-> RUB\n  exchangeRates.push({\n    date: new Date().toISOString().split('T')[0],\n    from_currency: 'EUR',\n    to_currency: 'RUB',\n    rate: rates.RUB / rates.EUR,\n    source: 'ExchangeRate-API_CROSS'\n  });\n  exchangeRates.push({\n    date: new Date().toISOString().split('T')[0],\n    from_currency: 'RUB',\n    to_currency: 'EUR',\n    rate: rates.EUR / rates.RUB,\n    source: 'ExchangeRate-API_CROSS'\n  });\n}\n\nreturn exchangeRates.map(rate => ({ json: rate }));"
      },
      "id": "js-transform-rates",
      "name": "Transform Rates Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO exchange_rates (date, from_currency, to_currency, rate, source)\nVALUES (\n  '{{ $json.date }}',\n  '{{ $json.from_currency }}',\n  '{{ $json.to_currency }}',\n  {{ $json.rate }},\n  '{{ $json.source }}'\n)\nON CONFLICT (date, from_currency, to_currency)\nDO UPDATE SET\n  rate = EXCLUDED.rate,\n  updated_at = NOW()\nRETURNING *;",
        "options": {}
      },
      "id": "postgres-insert-rates",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        900,
        300
      ],
      "credentials": {
        "postgres": {
          "id": "your-postgres-credential-id",
          "name": "Supabase PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\nconst items = $input.all();\nconst totalRates = items.length;\nconst currencies = new Set();\n\nitems.forEach(item => {\n  currencies.add(item.json.from_currency);\n  currencies.add(item.json.to_currency);\n});\n\nconst summary = {\n  date: new Date().toISOString().split('T')[0],\n  total_rates: totalRates,\n  currencies: Array.from(currencies).join(', '),\n  status: 'success',\n  timestamp: new Date().toISOString()\n};\n\nreturn [{ json: summary }];"
      },
      "id": "js-summary",
      "name": "Create Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "chatId": "{{ $('Set Admin Telegram ID').first().json.admin_chat_id }}",
        "text": "=‚úÖ *–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã*\n\nüìÖ –î–∞—Ç–∞: {{ $json.date }}\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {{ $json.total_rates }}\nüí± –í–∞–ª—é—Ç—ã: {{ $json.currencies }}\n‚è∞ –í—Ä–µ–º—è: {{ $json.timestamp }}\n\n_–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –≤ 10:00_",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "id": "telegram-notify",
      "name": "Send Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1340,
        300
      ],
      "credentials": {
        "telegramApi": {
          "id": "your-telegram-credential-id",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "admin_chat_id",
              "value": "1109421300"
            }
          ]
        },
        "options": {}
      },
      "id": "set-admin-id",
      "name": "Set Admin Telegram ID",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1120,
        480
      ],
      "notes": "–ó–∞–º–µ–Ω–∏—Ç–µ 123456789 –Ω–∞ –≤–∞—à Telegram ID –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "error-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notExists"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-success",
      "name": "Check if Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1340,
        480
      ]
    },
    {
      "parameters": {
        "chatId": "{{ $('Set Admin Telegram ID').first().json.admin_chat_id }}",
        "text": "=‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤*\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\nüìÖ –î–∞—Ç–∞: {{ new Date().toISOString().split('T')[0] }}\n‚è∞ –í—Ä–µ–º—è: {{ new Date().toISOString() }}\n\n_–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API_",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "Markdown"
        }
      },
      "id": "telegram-error",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1560,
        580
      ],
      "credentials": {
        "telegramApi": {
          "id": "your-telegram-credential-id",
          "name": "AIAccounter"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Every Day at 10:00 AM": {
      "main": [
        [
          {
            "node": "Get Exchange Rates (API)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Exchange Rates (API)": {
      "main": [
        [
          {
            "node": "Transform Rates Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Rates Data": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Create Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Summary": {
      "main": [
        [
          {
            "node": "Send Notification",
            "type": "main",
            "index": 0
          },
          {
            "node": "Set Admin Telegram ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Admin Telegram ID": {
      "main": [
        [
          {
            "node": "Check if Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Success": {
      "main": [
        [],
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "your-instance-id"
  },
  "id": "exchange-rates-daily",
  "tags": []
}
