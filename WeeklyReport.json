{
  "name": "Weekly Financial Report",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "20555b04-93f5-44cd-859d-ee542a769162",
      "name": "Schedule: Sunday 20:00",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -448,
        112
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        80,
        112
      ],
      "id": "64472c1f-7b79-49d4-b9c9-7b28ee9691ac",
      "name": "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    },
    {
      "parameters": {
        "chatId": "={{ $json['Telegram Chat ID'] }}",
        "text": "={{ $('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É').first().json.message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1120,
        80
      ],
      "id": "d5a3bce2-5bc8-4cdf-bc3a-dfd41b56c6e5",
      "name": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç",
      "webhookId": "0903e86c-df58-402f-8be0-c055fa004811",
      "credentials": {
        "telegramApi": {
          "id": "Nb8jQBRgnrgZzmCF",
          "name": "AIAccounter"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT user_id, username, first_name, telegram_chat_id\nFROM users\nWHERE is_active = true\nORDER BY user_id;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -240,
        112
      ],
      "id": "2fafee05-3973-484d-a66f-c7a9e309ba03",
      "name": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH week_range AS (\n  SELECT \n    DATE_TRUNC('week', CURRENT_DATE AT TIME ZONE 'Asia/Bishkek') as week_start,\n    DATE_TRUNC('week', CURRENT_DATE AT TIME ZONE 'Asia/Bishkek') + INTERVAL '6 days' as week_end\n),\nincome_sum AS (\n  SELECT COALESCE(SUM(amount), 0) as total\n  FROM income\n  WHERE user_id = {{ $json.user_id }}\n    AND date >= (SELECT week_start FROM week_range)::date\n    AND date <= (SELECT week_end FROM week_range)::date\n),\nexpense_sum AS (\n  SELECT COALESCE(SUM(amount), 0) as total\n  FROM expenses\n  WHERE user_id = {{ $json.user_id }}\n    AND date >= (SELECT week_start FROM week_range)::date\n    AND date <= (SELECT week_end FROM week_range)::date\n),\ntop_categories AS (\n  SELECT \n    category,\n    SUM(amount) as total,\n    COUNT(*) as count\n  FROM expenses\n  WHERE user_id = {{ $json.user_id }}\n    AND date >= (SELECT week_start FROM week_range)::date\n    AND date <= (SELECT week_end FROM week_range)::date\n  GROUP BY category\n  ORDER BY total DESC\n  LIMIT 3\n),\ntransaction_count AS (\n  SELECT \n    (SELECT COUNT(*) FROM income WHERE user_id = {{ $json.user_id }} \n     AND date >= (SELECT week_start FROM week_range)::date\n     AND date <= (SELECT week_end FROM week_range)::date) as income_count,\n    (SELECT COUNT(*) FROM expenses WHERE user_id = {{ $json.user_id }}\n     AND date >= (SELECT week_start FROM week_range)::date\n     AND date <= (SELECT week_end FROM week_range)::date) as expense_count\n)\nSELECT \n  TO_CHAR((SELECT week_start FROM week_range), 'DD.MM.YYYY') as week_start_formatted,\n  TO_CHAR((SELECT week_end FROM week_range), 'DD.MM.YYYY') as week_end_formatted,\n  (SELECT total FROM income_sum) as total_income,\n  (SELECT total FROM expense_sum) as total_expenses,\n  (SELECT total FROM income_sum) - (SELECT total FROM expense_sum) as profit,\n  (SELECT income_count FROM transaction_count) as income_count,\n  (SELECT expense_count FROM transaction_count) as expense_count,\n  (SELECT income_count + expense_count FROM transaction_count) as total_transactions,\n  COALESCE((SELECT JSON_AGG(JSON_BUILD_OBJECT(\n    'category', category,\n    'total', total,\n    'count', count\n  )) FROM top_categories), '[]'::json) as top_categories;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        336,
        96
      ],
      "id": "ad069464-e6c4-4dbb-b90c-50929f07ced0",
      "name": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–¥–µ–ª–∏",
      "credentials": {
        "postgres": {
          "id": "3CGZzcUsaAWp8nrl",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const data = $json;\n\n// –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\nif (data.total_transactions === 0) {\n  return null; // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n}\n\nconst topCategories = JSON.parse(data.top_categories || '[]');\nconst emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£'];\n\nconst topCategoriesText = topCategories.map((cat, index) => {\n  const percent = data.total_expenses > 0 \n    ? Math.round((cat.total / data.total_expenses) * 100) \n    : 0;\n  return `${emojis[index]} ${cat.category}: ${Math.round(cat.total).toLocaleString('ru-RU')} —Å–æ–º (${percent}%)`;\n}).join('\\n');\n\nconst message = `üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞\nüóì ${data.week_start_formatted} - ${data.week_end_formatted}\n\nüí∞ –î–û–•–û–î–´: ${Math.round(data.total_income).toLocaleString('ru-RU')} —Å–æ–º\nüí∏ –†–ê–°–•–û–î–´: ${Math.round(data.total_expenses).toLocaleString('ru-RU')} —Å–æ–º\nüìà –ü–†–ò–ë–´–õ–¨: ${Math.round(data.profit).toLocaleString('ru-RU')} —Å–æ–º\n\nüèÜ –¢–û–ü-3 –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–°–•–û–î–û–í:\n${topCategoriesText || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\nüí° –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${data.total_transactions}`;\n\nreturn {\n  json: {\n    message: message,\n    telegram_chat_id: $('Split In Batches').first().json.telegram_chat_id\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        96
      ],
      "id": "cfd47f07-9209-432f-8803-137a85a6d83a",
      "name": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6eadcac0-507a-4747-bf38-2abafa84397c",
              "leftValue": "={{ $json.message }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        752,
        96
      ],
      "id": "508698b4-4fc1-4819-8e44-63a8864d63c2",
      "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule: Sunday 20:00": {
      "main": [
        [
          {
            "node": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º": {
      "main": [
        [
          {
            "node": "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–¥–µ–ª–∏",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç": {
      "main": [
        [
          {
            "node": "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": {
      "main": [
        [
          {
            "node": "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–µ–¥–µ–ª–∏": {
      "main": [
        [
          {
            "node": "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e0627499-afdb-449d-922a-4956da09d4b5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "bcdca7003a882ee2cf9d975eab94cc02ba456a1ed2ac37511421cb2edeb80c62"
  },
  "id": "Fedy4Ys9AHC9ODTk",
  "tags": []
}