{
  "name": "Weekly Financial Report",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        },
        "cronExpression": "0 20 * * 0"
      },
      "id": "schedule-trigger",
      "name": "Schedule: Sunday 20:00",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const now = new Date();\nconst dayOfWeek = now.getDay();\nconst diffToMonday = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;\n\nconst monday = new Date(now);\nmonday.setDate(now.getDate() + diffToMonday);\nmonday.setHours(0, 0, 0, 0);\n\nconst sunday = new Date(monday);\nsunday.setDate(monday.getDate() + 6);\nsunday.setHours(23, 59, 59, 999);\n\nconst formatDate = (date) => {\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const year = date.getFullYear();\n  return `${day}.${month}.${year}`;\n};\n\nreturn {\n  json: {\n    week_start: formatDate(monday),\n    week_end: formatDate(sunday),\n    week_start_timestamp: monday.toISOString(),\n    week_end_timestamp: sunday.toISOString(),\n    week_number: Math.ceil(((now - new Date(now.getFullYear(), 0, 1)) / 86400000 + 1) / 7)\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "id": "calc-week-range",
      "name": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–¥–µ–ª—é"
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "1Zl8_Q-t6s3hN8yr2Pn85_8cwk0iNV5qDOvAglVmVMdo",
          "mode": "list"
        },
        "sheetName": {
          "__rl": true,
          "value": 1490011688,
          "mode": "list",
          "cachedResultName": "–î–æ—Ö–æ–¥—ã"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [680, 200],
      "id": "read-income",
      "name": "–ß–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥—ã"
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "1Zl8_Q-t6s3hN8yr2Pn85_8cwk0iNV5qDOvAglVmVMdo",
          "mode": "list"
        },
        "sheetName": {
          "__rl": true,
          "value": 598940202,
          "mode": "list",
          "cachedResultName": "–†–∞—Å—Ö–æ–¥—ã"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [680, 400],
      "id": "read-expenses",
      "name": "–ß–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã"
    },
    {
      "parameters": {
        "jsCode": "const weekData = $('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–¥–µ–ª—é').first().json;\nconst incomeData = $('–ß–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥—ã').all().map(item => item.json);\nconst expenseData = $('–ß–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã').all().map(item => item.json);\n\nconst totalIncome = incomeData.reduce((sum, item) => sum + parseFloat(item['–°—É–º–º–∞'] || 0), 0);\nconst totalExpenses = expenseData.reduce((sum, item) => sum + parseFloat(item['–°—É–º–º–∞'] || 0), 0);\nconst profit = totalIncome - totalExpenses;\n\nconst expensesByCategory = {};\nexpenseData.forEach(item => {\n  const category = item['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] || '–ü—Ä–æ—á–µ–µ';\n  const amount = parseFloat(item['–°—É–º–º–∞'] || 0);\n  expensesByCategory[category] = (expensesByCategory[category] || 0) + amount;\n});\n\nconst topCategories = Object.entries(expensesByCategory)\n  .sort((a, b) => b[1] - a[1])\n  .slice(0, 3);\n\nconst emojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£'];\nconst topCategoriesText = topCategories\n  .map(([cat, amount], index) => {\n    const percent = totalExpenses > 0 ? Math.round((amount / totalExpenses) * 100) : 0;\n    return `${emojis[index]} ${cat}: ${Math.round(amount).toLocaleString('ru-RU')} —Å–æ–º (${percent}%)`;\n  })\n  .join('\\n');\n\nconst message = `üìä –ù–µ–¥–µ–ª—å–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞\\nüóì ${weekData.week_start} - ${weekData.week_end}\\n\\nüí∞ –î–û–•–û–î–´: ${Math.round(totalIncome).toLocaleString('ru-RU')} —Å–æ–º\\nüí∏ –†–ê–°–•–û–î–´: ${Math.round(totalExpenses).toLocaleString('ru-RU')} —Å–æ–º\\nüìà –ü–†–ò–ë–´–õ–¨: ${Math.round(profit).toLocaleString('ru-RU')} —Å–æ–º\\n\\nüèÜ –¢–û–ü-3 –ö–ê–¢–ï–ì–û–†–ò–ò –†–ê–°–•–û–î–û–í:\\n${topCategoriesText || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\\n\\nüí° –û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${incomeData.length + expenseData.length}`;\n\nreturn {\n  json: {\n    message: message,\n    total_income: totalIncome,\n    total_expenses: totalExpenses,\n    profit: profit,\n    transactions_count: incomeData.length + expenseData.length,\n    top_categories: topCategories\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300],
      "id": "calc-statistics",
      "name": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    },
    {
      "parameters": {
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "1Zl8_Q-t6s3hN8yr2Pn85_8cwk0iNV5qDOvAglVmVMdo",
          "mode": "list"
        },
        "sheetName": {
          "__rl": true,
          "value": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
          "mode": "name"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [1120, 300],
      "id": "get-users",
      "name": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1340, 300],
      "id": "split-users",
      "name": "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    },
    {
      "parameters": {
        "chatId": "={{ $json['Telegram Chat ID'] }}",
        "text": "={{ $('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É').first().json.message }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [1560, 300],
      "id": "send-report",
      "name": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç",
      "credentials": {
        "telegramApi": {
          "id": "ink5DVmWPQ53OHzH",
          "name": "Telegram account"
        }
      }
    }
  ],
  "connections": {
    "Schedule: Sunday 20:00": {
      "main": [
        [
          {
            "node": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–¥–µ–ª—é",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–¥–µ–ª—é": {
      "main": [
        [
          {
            "node": "–ß–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥—ã",
            "type": "main",
            "index": 0
          },
          {
            "node": "–ß–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ß–∏—Ç–∞—Ç—å –¥–æ—Ö–æ–¥—ã": {
      "main": [
        [
          {
            "node": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ß–∏—Ç–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã": {
      "main": [
        [
          {
            "node": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É": {
      "main": [
        [
          {
            "node": "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π": {
      "main": [
        [
          {
            "node": "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º": {
      "main": [
        [
          {
            "node": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç": {
      "main": [
        [
          {
            "node": "–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Bishkek"
  },
  "tags": []
}
