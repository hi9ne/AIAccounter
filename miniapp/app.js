// AI Accounter Mini App v2.2.0 - Main Application
// –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Telegram Bot (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–π User ID (–≤–∞—à Telegram ID)
const DEFAULT_USER_ID = 1109421300;

// –í–∞–ª—é—Ç—ã
const currencies = {
    'KGS': { symbol: '—Å', name: '–°–æ–º' },
    'USD': { symbol: '$', name: '–î–æ–ª–ª–∞—Ä' },
    'EUR': { symbol: '‚Ç¨', name: '–ï–≤—Ä–æ' },
    'RUB': { symbol: '‚ÇΩ', name: '–†—É–±–ª—å' }
};

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞)
const categories = {
    income: [
        '–ó–∞—Ä–ø–ª–∞—Ç–∞', '–ü—Ä–æ–¥–∞–∂–∏ —Ç–æ–≤–∞—Ä–æ–≤', '–ü—Ä–æ–¥–∞–∂–∏ —É—Å–ª—É–≥', '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞',
        '–î–∏–≤–∏–¥–µ–Ω–¥—ã –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π', '–í–æ–∑–≤—Ä–∞—Ç –Ω–∞–ª–æ–≥–æ–≤', '–ö—ç—à–±–µ–∫',
        '–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã', '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', '–û–±—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤',
        '–§—Ä–∏–ª–∞–Ω—Å', '–ê—Ä–µ–Ω–¥–∞ –∏–º—É—â–µ—Å—Ç–≤–∞'
    ],
    expense: [
        '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ê—Ä–µ–Ω–¥–∞ –æ—Ñ–∏—Å–∞', '–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        '–†–µ–∫–ª–∞–º–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ù–∞–ª–æ–≥–∏ –∏ —Å–±–æ—Ä—ã', '–ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è –∏ –æ—Ñ–∏—Å',
        '–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–û–±—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ',
        '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏', '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ –∏ –∞—É–¥–∏—Ç', '–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
        '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', 'IT-—É—Å–ª—É–≥–∏ –∏ —Å–æ—Ñ—Ç', '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ',
        '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–û–¥–µ–∂–¥–∞', '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        '–•–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
    ]
};

let selectedCategory = '';
let selectedCurrency = 'KGS';
let isRecording = false;
let currentEditTransaction = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
    loadCategories();
    setCurrentDateTime();
    loadStats();
});

function setupEventListeners() {
    document.getElementById('transaction-form').addEventListener('submit', handleSubmit);
    document.getElementById('operation-type').addEventListener('change', loadCategories);
    document.getElementById('currency').addEventListener('change', function() {
        selectedCurrency = this.value;
        updateCurrencyDisplay();
    });
    document.getElementById('history-filter').addEventListener('change', loadHistory);
    document.getElementById('history-period').addEventListener('change', loadHistory);
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–ö–õ–ê–î–ö–ê–ú–ò ===
function switchTab(tabName) {
    // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.getElementById(tabName + '-tab').classList.add('active');
    event.target.classList.add('active');

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'stats') {
        loadStats();
    } else if (tabName === 'history') {
        loadHistory();
    }
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===
function loadCategories() {
    const operationType = document.getElementById('operation-type').value;
    const categoryGrid = document.getElementById('category-grid');
    const categoryList = categories[operationType];

    categoryGrid.innerHTML = '';
    categoryList.forEach(category => {
        const categoryItem = document.createElement('div');
        categoryItem.className = 'category-item';
        categoryItem.textContent = category;
        categoryItem.onclick = () => selectCategory(categoryItem, category);
        categoryGrid.appendChild(categoryItem);
    });
}

function selectCategory(element, category) {
    // –£–±—Ä–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    document.querySelectorAll('.category-item').forEach(item => {
        item.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    element.classList.add('selected');
    selectedCategory = category;
}

function updateCurrencyDisplay() {
    const currency = currencies[selectedCurrency];
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
}

function quickAdd(type) {
    document.getElementById('operation-type').value = type;
    loadCategories();
    switchTab('add');
}

// === –†–ê–ë–û–¢–ê –° –§–û–†–ú–û–ô ===
function setCurrentDateTime() {
    const now = new Date();
    const date = now.toISOString().split('T')[0];
    const time = now.toTimeString().split(' ')[0].substring(0, 5);
    
    document.getElementById('date').value = date;
    document.getElementById('time').value = time;
}

function handleSubmit(event) {
    event.preventDefault();

    if (!selectedCategory) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        return;
    }

    const amount = parseFloat(document.getElementById('amount').value);
    const currency = document.getElementById('currency').value;
    const operationType = document.getElementById('operation-type').value;
    
    const formData = {
        type: operationType,
        amount: amount,
        currency: currency,
        category: selectedCategory,
        description: document.getElementById('description').value,
        date: document.getElementById('date').value,
        time: document.getElementById('time').value
    };

    sendToBot('add_transaction', formData);
}

function resetForm() {
    document.getElementById('transaction-form').reset();
    selectedCategory = '';
    selectedCurrency = 'KGS';
    document.querySelectorAll('.category-item').forEach(item => {
        item.classList.remove('selected');
    });
    setCurrentDateTime();
}

// === –ì–û–õ–û–°–û–í–û–ô –í–í–û–î ===
function startVoiceInput() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        alert('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = 'ru-RU';
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = function() {
        isRecording = true;
        document.querySelector('.voice-btn').textContent = 'üî¥';
    };

    recognition.onresult = function(event) {
        const transcript = event.results[0][0].transcript;
        document.getElementById('description').value = transcript;
        isRecording = false;
        document.querySelector('.voice-btn').textContent = 'üé§';
    };

    recognition.onerror = function(event) {
        console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:', event.error);
        isRecording = false;
        document.querySelector('.voice-btn').textContent = 'üé§';
    };

    recognition.start();
}

// === –û–¢–ü–†–ê–í–ö–ê –î–ê–ù–ù–´–• –ù–ê WEBHOOK ===
async function sendToBot(action, data) {
    const webhookUrl = 'https://hi9neee.app.n8n.cloud/webhook/miniapp';
    
    const userId = tg.initDataUnsafe?.user?.id || DEFAULT_USER_ID;
    
    const payload = {
        action: action,
        data: data,
        userId: userId
    };
    
    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });
        
        const result = await response.json();
        
        if (result.success) {
            // –£—Å–ø–µ—Ö
            if (action === 'add_transaction') {
                const currencySymbol = currencies[data.currency].symbol;
                showNotification(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ${data.amount} ${currencySymbol} –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, 'success');
                resetForm();
                loadStats(); // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                loadHistory(); // –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
            } else if (action === 'edit_transaction') {
                showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!', 'success');
                loadHistory();
            } else if (action === 'delete_transaction') {
                showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!', 'success');
                loadHistory();
            } else if (action === 'restore_transaction') {
                showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
                loadHistory();
            }
        } else {
            showNotification('–û—à–∏–±–∫–∞: ' + (result.error || 'Unknown'), 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', 'error');
    }
}

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
async function loadStats() {
    const webhookUrl = 'https://hi9neee.app.n8n.cloud/webhook/miniapp';
    const userId = tg.initDataUnsafe?.user?.id || DEFAULT_USER_ID;
    
    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                action: 'get_stats',
                userId: userId
            })
        });
        
        console.log('Response status:', response.status);
        const text = await response.text();
        console.log('Response text:', text);
        
        if (!text) {
            showNotification('API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ MiniApp_API.json –≤ n8n!', 'error');
            return;
        }
        
        const result = JSON.parse(text);
        
        if (result.success) {
            updateStats(result.data);
        } else {
            showNotification('–û—à–∏–±–∫–∞: ' + (result.error || 'Unknown'), 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞: ' + error.message, 'error');
    }
}

function refreshStats() {
    loadStats();
}

function updateStats(stats) {
    const currency = stats.currency || 'KGS';
    const currencySymbol = currencies[currency].symbol;
    
    document.getElementById('monthly-income').textContent = 
        (stats.income || 0).toLocaleString('ru-RU') + ' ' + currencySymbol;
    document.getElementById('monthly-expenses').textContent = 
        (stats.expenses || 0).toLocaleString('ru-RU') + ' ' + currencySymbol;
    document.getElementById('profit').textContent = 
        (stats.profit || 0).toLocaleString('ru-RU') + ' ' + currencySymbol;
    document.getElementById('transactions-count').textContent = stats.count || 0;
    
    const profitElement = document.getElementById('profit');
    profitElement.className = 'stat-value ' + ((stats.profit || 0) >= 0 ? 'positive' : 'negative');
}

// === –ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô ===
async function loadHistory() {
    const webhookUrl = 'https://hi9neee.app.n8n.cloud/webhook/miniapp';
    const userId = tg.initDataUnsafe?.user?.id || DEFAULT_USER_ID;
    const filter = document.getElementById('history-filter').value;
    const period = document.getElementById('history-period').value;
    
    try {
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                action: 'get_history',
                userId: userId,
                data: {
                    filter: filter,
                    period: period
                }
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            updateHistory(result.data);
        } else {
            showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
    }
}

function updateHistory(history) {
    const historyList = document.getElementById('history-list');
    historyList.innerHTML = '';
    
    if (!history || history.length === 0) {
        historyList.innerHTML = '<div class="loading">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>';
        return;
    }
    
    history.forEach(item => {
        const historyItem = createHistoryItem(item);
        historyList.appendChild(historyItem);
    });
}

function createHistoryItem(item) {
    const currency = item.currency || 'KGS';
    const currencySymbol = currencies[currency].symbol;
    const historyItem = document.createElement('div');
    const isDeleted = item.deleted_at !== null;
    const amount = parseFloat(item.amount) || 0;
    
    historyItem.className = `history-item ${item.type}${isDeleted ? ' deleted' : ''}`;
    
    historyItem.innerHTML = `
        <div class="history-header">
            <span class="history-amount">${amount.toLocaleString('ru-RU')} ${currencySymbol}</span>
            <span class="history-category">${item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}</span>
        </div>
        ${item.description ? `<div class="history-description">${item.description}</div>` : ''}
        <div class="history-date">
            ${new Date(item.date).toLocaleDateString('ru-RU')}
            ${isDeleted ? ' ‚Ä¢ <strong>–£–¥–∞–ª–µ–Ω–æ</strong>' : ''}
        </div>
        <div class="history-actions">
            ${!isDeleted ? `
                <button class="action-btn action-btn-edit" onclick="editTransaction(${item.id}, '${item.type}')">
                    ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                </button>
                <button class="action-btn action-btn-delete" onclick="deleteTransaction(${item.id}, '${item.type}')">
                    üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                </button>
            ` : `
                <button class="action-btn action-btn-restore" onclick="restoreTransaction(${item.id}, '${item.type}')">
                    üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                </button>
            `}
            <button class="action-btn action-btn-history" onclick="showTransactionHistory(${item.id}, '${item.type}')">
                üìú –ò—Å—Ç–æ—Ä–∏—è
            </button>
        </div>
    `;
    
    return historyItem;
}

// === v2.2.0 –§–£–ù–ö–¶–ò–ò: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï/–£–î–ê–õ–ï–ù–ò–ï/–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ===

function editTransaction(id, type) {
    const field = prompt('–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?\n–í–≤–µ–¥–∏—Ç–µ: amount, category, description, date –∏–ª–∏ currency');
    if (!field) return;
    
    const validFields = ['amount', 'category', 'description', 'date', 'currency'];
    if (!validFields.includes(field.toLowerCase())) {
        alert('–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: amount, category, description, date, currency');
        return;
    }
    
    const newValue = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${field}:`);
    if (!newValue) return;
    
    sendToBot('edit_transaction', {
        transaction_id: id,
        transaction_type: type === 'income' ? 'income' : 'expense',
        field: field.toLowerCase(),
        new_value: newValue
    });
    
    showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...', 'info');
}

function deleteTransaction(id, type) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é? –ï—ë –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.')) return;
    
    sendToBot('delete_transaction', {
        transaction_id: id,
        transaction_type: type === 'income' ? 'income' : 'expense'
    });
    
    showNotification('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...', 'info');
}

function restoreTransaction(id, type) {
    if (!confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?')) return;
    
    sendToBot('restore_transaction', {
        transaction_id: id,
        transaction_type: type === 'income' ? 'income' : 'expense'
    });
    
    showNotification('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...', 'info');
}

function showTransactionHistory(id, type) {
    sendToBot('get_transaction_history', {
        transaction_id: id,
        transaction_type: type === 'income' ? 'income' : 'expense'
    });
    
    showNotification('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...', 'info');
}

// === –û–¢–ß–Å–¢–´ ===
function generateReport(type) {
    const period = document.getElementById('report-period').value;
    
    sendToBot('generate_report', {
        type: type,
        period: period
    });
    
    showNotification(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${type.toUpperCase()} –æ—Ç—á—ë—Ç–∞...`, 'info');
}

// === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = type;
    notification.textContent = message;
    
    const container = document.querySelector('.container');
    container.insertBefore(notification, container.firstChild);
    
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// === –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ë–û–¢–ê ===
tg.onEvent('mainButtonClicked', function() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
});

window.addEventListener('message', function(event) {
    try {
        const data = JSON.parse(event.data);
        
        switch(data.action) {
            case 'stats_updated':
                updateStats(data.stats);
                break;
            case 'history_loaded':
                updateHistory(data.history);
                break;
            case 'report_generated':
                showNotification('–û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
                break;
            case 'transaction_updated':
                showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', 'success');
                loadHistory();
                break;
            case 'transaction_deleted':
                showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!', 'success');
                loadHistory();
                break;
            case 'transaction_restored':
                showNotification('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
                loadHistory();
                break;
            case 'transaction_history':
                displayTransactionHistory(data.history);
                break;
            case 'error':
                showNotification('–û—à–∏–±–∫–∞: ' + data.message, 'error');
                break;
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
    }
});

function displayTransactionHistory(history) {
    if (!history || history.length === 0) {
        showNotification('–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞', 'info');
        return;
    }
    
    let historyText = '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n\n';
    history.forEach((item, index) => {
        historyText += `${index + 1}. ${item.action} - ${item.field_changed || ''}\n`;
        historyText += `   ${item.old_value || ''} ‚Üí ${item.new_value || ''}\n`;
        historyText += `   ${new Date(item.changed_at).toLocaleString('ru-RU')}\n\n`;
    });
    
    alert(historyText);
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è HTML
window.switchTab = switchTab;
window.quickAdd = quickAdd;
window.startVoiceInput = startVoiceInput;
window.refreshStats = refreshStats;
window.loadHistory = loadHistory;
window.generateReport = generateReport;
window.editTransaction = editTransaction;
window.deleteTransaction = deleteTransaction;
window.restoreTransaction = restoreTransaction;
window.showTransactionHistory = showTransactionHistory;
