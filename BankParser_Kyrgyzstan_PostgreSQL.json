{
  "name": "Bank SMS Parser - Kyrgyzstan (PostgreSQL)",
  "nodes": [
    {
      "parameters": {
        "options": {
          "forceReconnect": 1
        }
      },
      "id": "8baf2acf-80ab-4349-87e5-bc37ec9e6d38",
      "name": "Email Trigger (IMAP)",
      "type": "n8n-nodes-base.emailReadImap",
      "typeVersion": 2.1,
      "position": [
        -1328,
        208
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.from.value[0].address }}",
              "operation": "contains",
              "value2": "@kicb.kg"
            }
          ]
        }
      },
      "id": "bc1708be-41a3-4a1a-9230-5090d628d0f3",
      "name": "Фильтр: Банки КР",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1104,
        208
      ]
    },
    {
      "parameters": {
        "jsCode": "const emailBody = $json.text || $json.html || '';\nconst subject = $json.subject || '';\nconst fullText = subject + ' ' + emailBody;\n\nlet parsed = {\n  bank: 'unknown',\n  type: 'расход',\n  amount: 0,\n  merchant: 'Неизвестно',\n  date: new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Bishkek', day: '2-digit', month: '2-digit', year: 'numeric' }),\n  raw_text: fullText\n};\n\n// KICB Bank\nif (fullText.includes('KICB') || $json.from.value[0].address.includes('@kicb.kg')) {\n  parsed.bank = 'KICB';\n  \n  // Покупка\n  const purchaseMatch = fullText.match(/покупка[\\s\\S]*?(\\d+[\\s,]?\\d*\\.?\\d*)[\\s]?(?:сом|KGS)/i);\n  if (purchaseMatch) {\n    parsed.amount = parseFloat(purchaseMatch[1].replace(/[\\s,]/g, ''));\n    parsed.type = 'расход';\n  }\n  \n  // Пополнение\n  const incomeMatch = fullText.match(/пополнение[\\s\\S]*?(\\d+[\\s,]?\\d*\\.?\\d*)[\\s]?(?:сом|KGS)/i);\n  if (incomeMatch) {\n    parsed.amount = parseFloat(incomeMatch[1].replace(/[\\s,]/g, ''));\n    parsed.type = 'доход';\n  }\n  \n  // Merchant\n  const merchantMatch = fullText.match(/(?:покупка|оплата)[\\s]+(?:в|у)[\\s]+([A-Za-zА-Яа-я0-9\\s]+)/i);\n  if (merchantMatch) {\n    parsed.merchant = merchantMatch[1].trim();\n  }\n}\n\n// Optima Bank\nif (fullText.includes('Optima') || $json.from.value[0].address.includes('@optimabank.kg')) {\n  parsed.bank = 'Optima Bank';\n  \n  const amountMatch = fullText.match(/(\\d+[\\s,]?\\d*\\.?\\d*)[\\s]?(?:сом|KGS)/i);\n  if (amountMatch) {\n    parsed.amount = parseFloat(amountMatch[1].replace(/[\\s,]/g, ''));\n  }\n  \n  if (fullText.match(/списан[ои]|покупка|оплата/i)) {\n    parsed.type = 'расход';\n  } else if (fullText.match(/зачислен[ои]|пополнение|поступление/i)) {\n    parsed.type = 'доход';\n  }\n}\n\n// Bakai Bank\nif (fullText.includes('Bakai') || fullText.includes('Бакай')) {\n  parsed.bank = 'Бакай Банк';\n  \n  const amountMatch = fullText.match(/(\\d+[\\s,]?\\d*\\.?\\d*)[\\s]?(?:сом|KGS)/i);\n  if (amountMatch) {\n    parsed.amount = parseFloat(amountMatch[1].replace(/[\\s,]/g, ''));\n  }\n  \n  if (fullText.match(/расход|списан|покупка/i)) {\n    parsed.type = 'расход';\n  } else if (fullText.match(/доход|зачислен|поступил/i)) {\n    parsed.type = 'доход';\n  }\n}\n\n// Dos-Kredobank\nif (fullText.includes('Dos-Kredobank') || fullText.includes('ДосКредо')) {\n  parsed.bank = 'Дос-Кредобанк';\n  \n  const amountMatch = fullText.match(/(\\d+[\\s,]?\\d*\\.?\\d*)[\\s]?(?:сом|KGS)/i);\n  if (amountMatch) {\n    parsed.amount = parseFloat(amountMatch[1].replace(/[\\s,]/g, ''));\n  }\n  \n  if (fullText.match(/операция списания|покупка/i)) {\n    parsed.type = 'расход';\n  } else if (fullText.match(/поступление|зачисление/i)) {\n    parsed.type = 'доход';\n  }\n}\n\nreturn { json: parsed };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        112
      ],
      "id": "e3a68716-e9c0-433e-a889-6c001d29b20e",
      "name": "Парсинг SMS/Email"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.amount }}",
              "operation": "larger"
            }
          ]
        }
      },
      "id": "fd1f8c60-2d2b-48eb-8b82-2b6f11236eb1",
      "name": "Проверка суммы",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -656,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "const parsed = $json;\nconst aiCategory = $('AI категоризация').first()?.json?.category || 'Прочее';\n\nlet category = aiCategory;\n\n// Простая логика категоризации на основе merchant\nconst merchant = (parsed.merchant || '').toLowerCase();\n\nif (merchant.includes('bazaar') || merchant.includes('базар')) category = 'продукты питания';\nelse if (merchant.includes('taxi') || merchant.includes('такси')) category = 'транспорт';\nelse if (merchant.includes('cafe') || merchant.includes('кафе')) category = 'кафе и рестораны';\nelse if (merchant.includes('market') || merchant.includes('магазин')) category = 'продукты питания';\nelse if (merchant.includes('gas') || merchant.includes('газ')) category = 'транспорт';\nelse if (merchant.includes('pharmacy') || merchant.includes('аптека')) category = 'здоровье и красота';\n\n// Преобразование даты ДД.ММ.ГГГГ -> YYYY-MM-DD\nconst dateStr = parsed.date;\nlet sqlDate;\nif (dateStr.includes('.')) {\n  const [day, month, year] = dateStr.split('.');\n  sqlDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n} else {\n  sqlDate = new Date().toISOString().split('T')[0];\n}\n\nreturn {\n  json: {\n    date: sqlDate,\n    category: category,\n    amount: parsed.amount,\n    description: `${parsed.bank}: ${parsed.merchant}`,\n    operation_type: parsed.type,\n    source: 'bank_parser',\n    bank: parsed.bank,\n    merchant: parsed.merchant\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        112
      ],
      "id": "7a014bab-09ea-4ae0-b693-b7c23909f14a",
      "name": "Рассчитать категорию"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO expenses (user_id, date, category, amount, description, operation_type, source)\nVALUES (\n  1,\n  '{{ $json.date }}',\n  '{{ $json.category }}',\n  {{ $json.amount }},\n  '{{ $json.description }}',\n  'расход',\n  'bank_parser'\n)\nRETURNING *;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        0
      ],
      "id": "0673c084-9430-4e57-96ff-7b4ea81052c6",
      "name": "Сохранить расход",
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIAL_ID",
          "name": "Supabase PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO income (user_id, date, category, amount, description, operation_type, source)\nVALUES (\n  1,\n  '{{ $json.date }}',\n  '{{ $json.category }}',\n  {{ $json.amount }},\n  '{{ $json.description }}',\n  'доход',\n  'bank_parser'\n)\nRETURNING *;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        208
      ],
      "id": "7c307c90-7463-4bd9-ad5b-095fd29106f7",
      "name": "Сохранить доход",
      "credentials": {
        "postgres": {
          "id": "YOUR_POSTGRES_CREDENTIAL_ID",
          "name": "Supabase PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.operation_type }}",
              "value2": "расход"
            }
          ]
        }
      },
      "id": "c235dd89-e6be-4d8c-84f5-2e0e57bd4412",
      "name": "Тип операции",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -224,
        304
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Ты - помощник для категоризации банковских транзакций. Определи категорию на основе названия магазина/места. Категории: продукты питания, транспорт, кафе и рестораны, здоровье и красота, развлечения, одежда и обувь, коммунальные услуги, связь и интернет, образование, прочее. Верни только название категории.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Магазин: {{ $json.merchant }}, Сумма: {{ $json.amount }} сом, Банк: {{ $json.bank }}\"\n    }\n  ],\n  \"temperature\": 0.3,\n  \"max_tokens\": 50\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -448,
        112
      ],
      "id": "f24e4968-8c77-4f15-96bc-548d7cb93cb3",
      "name": "AI категоризация",
      "continueOnFail": true,
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Email Trigger (IMAP)": {
      "main": [
        [
          {
            "node": "Фильтр: Банки КР",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Фильтр: Банки КР": {
      "main": [
        [
          {
            "node": "Парсинг SMS/Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Парсинг SMS/Email": {
      "main": [
        [
          {
            "node": "Проверка суммы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка суммы": {
      "main": [
        [
          {
            "node": "AI категоризация",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI категоризация": {
      "main": [
        [
          {
            "node": "Рассчитать категорию",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Рассчитать категорию": {
      "main": [
        [
          {
            "node": "Тип операции",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Тип операции": {
      "main": [
        [
          {
            "node": "Сохранить расход",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Сохранить доход",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "postgresql-version-1",
  "meta": {
    "instanceId": "bcdca7003a882ee2cf9d975eab94cc02ba456a1ed2ac37511421cb2edeb80c62"
  },
  "id": "BankParserKyrgyzstanPostgreSQL",
  "tags": []
}
