/**
 * AIAccounter v2.4.0 Database Testing Script
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
 */

const { Client } = require('pg');

const DB_URL = 'postgresql://postgres.ggcmoikpztvbatstcnai:AIAccounter_2025@aws-1-ap-northeast-2.pooler.supabase.com:6543/postgres';

const TESTS = {
    tables: [
        'workspaces',
        'workspace_members',
        'workspace_invites',
        'invite_uses',
        'audit_logs',
        'user_preferences',
        'analytics_cache',
        'reports',
        'ml_forecasts',
        'chart_configs',
        'category_analytics',
        'spending_patterns'
    ],
    functions: [
        'create_workspace_with_owner',
        'check_workspace_permission',
        'get_user_workspaces',
        'log_audit_event',
        'get_income_expense_stats',
        'get_chart_data',
        'get_top_categories',
        'get_category_analytics',
        'get_spending_patterns',
        'get_balance_trend',
        'update_analytics_cache',
        'get_cached_analytics'
    ]
};

async function testDatabase() {
    const client = new Client({ connectionString: DB_URL });
    
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL...\n');
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');

        let passed = 0;
        let failed = 0;

        // ============================================================
        // TEST 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        // ============================================================
        console.log('üìã TEST 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü v2.4.0');
        console.log('‚îÅ'.repeat(50));
        
        for (const table of TESTS.tables) {
            try {
                const result = await client.query(`
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_schema = 'public' 
                        AND table_name = $1
                    );
                `, [table]);
                
                if (result.rows[0].exists) {
                    console.log(`‚úÖ ${table}`);
                    passed++;
                } else {
                    console.log(`‚ùå ${table} - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
                    failed++;
                }
            } catch (err) {
                console.log(`‚ùå ${table} - –û–®–ò–ë–ö–ê: ${err.message}`);
                failed++;
            }
        }

        // ============================================================
        // TEST 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        // ============================================================
        console.log('\nüîß TEST 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π v2.4.0');
        console.log('‚îÅ'.repeat(50));
        
        for (const func of TESTS.functions) {
            try {
                const result = await client.query(`
                    SELECT EXISTS (
                        SELECT FROM pg_proc 
                        WHERE proname = $1
                    );
                `, [func]);
                
                if (result.rows[0].exists) {
                    console.log(`‚úÖ ${func}()`);
                    passed++;
                } else {
                    console.log(`‚ùå ${func}() - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
                    failed++;
                }
            } catch (err) {
                console.log(`‚ùå ${func}() - –û–®–ò–ë–ö–ê: ${err.message}`);
                failed++;
            }
        }

        // ============================================================
        // TEST 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
        // ============================================================
        console.log('\nüîç TEST 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤');
        console.log('‚îÅ'.repeat(50));
        
        const indexes = [
            'idx_workspaces_owner',
            'idx_workspace_members_workspace',
            'idx_workspace_members_user',
            'idx_analytics_cache_workspace',
            'idx_reports_workspace'
        ];
        
        for (const index of indexes) {
            try {
                const result = await client.query(`
                    SELECT EXISTS (
                        SELECT FROM pg_indexes 
                        WHERE indexname = $1
                    );
                `, [index]);
                
                if (result.rows[0].exists) {
                    console.log(`‚úÖ ${index}`);
                    passed++;
                } else {
                    console.log(`‚ö†Ô∏è  ${index} - –Ω–µ –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)`);
                }
            } catch (err) {
                console.log(`‚ùå ${index} - –û–®–ò–ë–ö–ê: ${err.message}`);
            }
        }

        // ============================================================
        // TEST 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        // ============================================================
        console.log('\nüìä TEST 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö');
        console.log('‚îÅ'.repeat(50));
        
        try {
            const wsCount = await client.query('SELECT COUNT(*) FROM workspaces;');
            console.log(`‚úÖ Workspaces: ${wsCount.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
            passed++;
            
            const membersCount = await client.query('SELECT COUNT(*) FROM workspace_members;');
            console.log(`‚úÖ Members: ${membersCount.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
            passed++;
            
            const reportsCount = await client.query('SELECT COUNT(*) FROM reports;');
            console.log(`‚úÖ Reports: ${reportsCount.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
            passed++;
        } catch (err) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${err.message}`);
            failed++;
        }

        // ============================================================
        // TEST 5: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        // ============================================================
        console.log('\n‚öôÔ∏è  TEST 5: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
        console.log('‚îÅ'.repeat(50));
        
        try {
            // –¢–µ—Å—Ç get_user_workspaces
            const userWorkspaces = await client.query('SELECT get_user_workspaces(123456);');
            console.log(`‚úÖ get_user_workspaces() - —Ä–∞–±–æ—Ç–∞–µ—Ç`);
            passed++;
        } catch (err) {
            console.log(`‚ùå get_user_workspaces() - ${err.message}`);
            failed++;
        }

        try {
            // –¢–µ—Å—Ç get_income_expense_stats
            const stats = await client.query(`
                SELECT get_income_expense_stats(1, '2025-10-01', '2025-10-31');
            `);
            console.log(`‚úÖ get_income_expense_stats() - —Ä–∞–±–æ—Ç–∞–µ—Ç`);
            passed++;
        } catch (err) {
            console.log(`‚ùå get_income_expense_stats() - ${err.message}`);
            failed++;
        }

        // ============================================================
        // –ò–¢–û–ì–ò
        // ============================================================
        console.log('\n' + '‚ïê'.repeat(50));
        console.log('üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
        console.log('‚ïê'.repeat(50));
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
        console.log(`üìä –í—Å–µ–≥–æ: ${passed + failed}`);
        console.log(`üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round(passed / (passed + failed) * 100)}%`);
        
        if (failed === 0) {
            console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö v2.4.0 –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
        } else {
            console.log('\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π.');
        }

    } catch (err) {
        console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', err.message);
        process.exit(1);
    } finally {
        await client.end();
        console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testDatabase();
