{
  "name": "MiniApp API v2.3.0",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "miniapp",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*",
          "allowedMethods": "GET,POST,OPTIONS"
        }
      },
      "id": "webhook-miniapp",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        0,
        500
      ],
      "webhookId": "miniapp-webhook"
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "add_transaction",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "add_transaction"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "get_stats",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_stats"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "get_history",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_history"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "edit_transaction",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "edit_transaction"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "delete_transaction",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "delete_transaction"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "restore_transaction",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "restore_transaction"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "generate_report",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "generate_report"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "get_subscriptions",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_subscriptions"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "create_subscription",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "create_subscription"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "cancel_subscription",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "cancel_subscription"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "get_notifications",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_notifications"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "mark_notification_read",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "mark_notification_read"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "mark_all_read",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "mark_all_read"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "get_budget_forecast",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "get_budget_forecast"
            },
            {
              "conditions": {
                "options": {
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.action }}",
                    "rightValue": "save_alert_settings",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "save_alert_settings"
            }
          ]
        },
        "options": {}
      },
      "id": "switch-action",
      "name": "Switch by Action",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        200,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  type: data.type,\n  amount: parseFloat(data.amount),\n  currency: data.currency || 'KGS',\n  category: data.category,\n  description: data.description || '',\n  date: data.date,\n  userId: userId\n};"
      },
      "id": "prepare-add",
      "name": "Prepare Add Transaction",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO {{ $json.type === 'income' ? 'income' : 'expenses' }} \n(amount, currency, category, description, date, user_id, created_at)\nVALUES (\n  {{ $json.amount }},\n  '{{ $json.currency }}',\n  '{{ $json.category }}',\n  '{{ $json.description }}',\n  '{{ $json.date }}',\n  {{ $json.userId }},\n  NOW()\n)\nRETURNING id, amount, currency, category, description, date;",
        "additionalFields": {}
      },
      "id": "insert-transaction",
      "name": "Insert Transaction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        200
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Transaction added', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-add",
      "name": "Response Add",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.item.json.body.userId || 'unknown';\n\nreturn { userId };"
      },
      "id": "prepare-stats",
      "name": "Prepare Get Stats",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT \n  COALESCE(SUM(CASE WHEN type='income' THEN amount ELSE 0 END), 0) as income,\n  COALESCE(SUM(CASE WHEN type='expense' THEN amount ELSE 0 END), 0) as expenses,\n  COUNT(*) as count,\n  'KGS' as currency\nFROM (\n  SELECT amount, 'income' as type FROM income \n  WHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\n  AND deleted_at IS NULL\n  AND EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM CURRENT_DATE)\n  AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM CURRENT_DATE)\n  UNION ALL\n  SELECT amount, 'expense' as type FROM expenses \n  WHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\n  AND deleted_at IS NULL\n  AND EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM CURRENT_DATE)\n  AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM CURRENT_DATE)\n) t;",
        "additionalFields": {}
      },
      "id": "get-stats",
      "name": "Get Stats",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        400
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const stats = $input.item.json;\nconst profit = (stats.income || 0) - (stats.expenses || 0);\n\nreturn {\n  success: true,\n  data: {\n    income: stats.income || 0,\n    expenses: stats.expenses || 0,\n    profit: profit,\n    count: stats.count || 0,\n    currency: stats.currency || 'KGS'\n  }\n};"
      },
      "id": "format-stats",
      "name": "Format Stats",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-stats",
      "name": "Response Stats",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1000,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.item.json.body.userId || 'unknown';\nconst filter = $input.item.json.body.data?.filter || 'all';\nconst period = $input.item.json.body.data?.period || 'month';\n\nreturn { userId, filter, period };"
      },
      "id": "prepare-history",
      "name": "Prepare Get History",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=WITH combined AS (\n  SELECT \n    id,\n    amount,\n    currency,\n    category,\n    description,\n    date,\n    'income' as type,\n    deleted_at,\n    created_at\n  FROM income\n  WHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\n  {{ $json.filter === 'income' ? '' : (\n    $json.filter === 'expense' ? 'AND 1=0' : ''\n  ) }}\n  \n  UNION ALL\n  \n  SELECT \n    id,\n    amount,\n    currency,\n    category,\n    description,\n    date,\n    'expense' as type,\n    deleted_at,\n    created_at\n  FROM expenses\n  WHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\n  {{ $json.filter === 'expense' ? '' : (\n    $json.filter === 'income' ? 'AND 1=0' : ''\n  ) }}\n)\nSELECT * FROM combined\nWHERE \n  CASE \n    WHEN '{{ $json.period }}' = 'today' THEN date = CURRENT_DATE\n    WHEN '{{ $json.period }}' = 'week' THEN date >= CURRENT_DATE - INTERVAL '7 days'\n    WHEN '{{ $json.period }}' = 'month' THEN \n      EXTRACT(MONTH FROM date) = EXTRACT(MONTH FROM CURRENT_DATE)\n      AND EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM CURRENT_DATE)\n    WHEN '{{ $json.period }}' = 'year' THEN \n      EXTRACT(YEAR FROM date) = EXTRACT(YEAR FROM CURRENT_DATE)\n    ELSE TRUE\n  END\nORDER BY date DESC, created_at DESC\nLIMIT 100;",
        "additionalFields": {}
      },
      "id": "get-history",
      "name": "Get History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        600
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, data: $input.all() } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-history",
      "name": "Response History",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  transactionId: data.transaction_id,\n  transactionType: data.transaction_type,\n  field: data.field,\n  newValue: data.new_value,\n  userId: userId\n};"
      },
      "id": "prepare-edit",
      "name": "Prepare Edit",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        800
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE {{ $json.transactionType === 'income' ? 'income' : 'expenses' }}\nSET {{ $json.field }} = '{{ $json.newValue }}', updated_at = NOW()\nWHERE id = {{ $json.transactionId }}\nAND user_id = {{ $json.userId }}\nAND deleted_at IS NULL\nRETURNING *;",
        "additionalFields": {}
      },
      "id": "update-transaction",
      "name": "Update Transaction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Transaction updated', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-edit",
      "name": "Response Edit",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  transactionId: data.transaction_id,\n  transactionType: data.transaction_type,\n  userId: userId\n};"
      },
      "id": "prepare-delete",
      "name": "Prepare Delete",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        1000
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE {{ $json.transactionType === 'income' ? 'income' : 'expenses' }}\nSET deleted_at = NOW()\nWHERE id = {{ $json.transactionId }}\nAND user_id = {{ $json.userId }}\nAND deleted_at IS NULL\nRETURNING *;",
        "additionalFields": {}
      },
      "id": "delete-transaction",
      "name": "Delete Transaction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        1000
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Transaction deleted', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-delete",
      "name": "Response Delete",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  transactionId: data.transaction_id,\n  transactionType: data.transaction_type,\n  userId: userId\n};"
      },
      "id": "prepare-restore",
      "name": "Prepare Restore",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        1200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE {{ $json.transactionType === 'income' ? 'income' : 'expenses' }}\nSET deleted_at = NULL\nWHERE id = {{ $json.transactionId }}\nAND user_id = {{ $json.userId }}\nRETURNING *;",
        "additionalFields": {}
      },
      "id": "restore-transaction",
      "name": "Restore Transaction",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        1200
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Transaction restored', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-restore",
      "name": "Response Restore",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        1200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'PDF generation not implemented yet', data: { status: 'pending', format: 'pdf' } } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-report",
      "name": "Response Report",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        400,
        1300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: false, error: 'Unknown action: ' + $json.body.action } }}",
        "options": {
          "responseCode": 400,
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-error",
      "name": "Response Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        400,
        1400
      ]
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.item.json.body.userId || 'unknown';\nreturn { userId };"
      },
      "id": "prepare-subscriptions",
      "name": "Prepare Get Subscriptions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        1600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM recurring_payments \nWHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\nORDER BY is_active DESC, next_payment_date ASC;",
        "additionalFields": {}
      },
      "id": "get-subscriptions",
      "name": "Get Subscriptions",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        1600
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, data: $input.all() } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-subscriptions",
      "name": "Response Subscriptions",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        1600
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  userId: userId,\n  title: data.title,\n  amount: parseFloat(data.amount),\n  currency: data.currency || 'KGS',\n  category: data.category,\n  frequency: data.frequency,\n  remindDays: parseInt(data.remind_days) || 3,\n  autoCreate: data.auto_create || false\n};"
      },
      "id": "prepare-create-sub",
      "name": "Prepare Create Subscription",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        1800
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT create_recurring_payment(\n  {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}::BIGINT,\n  '{{ $json.title }}'::VARCHAR,\n  {{ $json.amount }}::NUMERIC,\n  '{{ $json.currency }}'::VARCHAR,\n  '{{ $json.category }}'::VARCHAR,\n  '{{ $json.frequency }}'::VARCHAR,\n  CURRENT_DATE,\n  'Подписка'::VARCHAR,\n  'expense'::VARCHAR,\n  1::INTEGER,\n  {{ $json.remindDays }}::INTEGER,\n  {{ $json.autoCreate }}::BOOLEAN\n);",
        "additionalFields": {}
      },
      "id": "create-subscription",
      "name": "Create Subscription",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        1800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Subscription created', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-create-sub",
      "name": "Response Create Sub",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        1800
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  userId: userId,\n  subscriptionId: data.subscription_id\n};"
      },
      "id": "prepare-cancel-sub",
      "name": "Prepare Cancel Subscription",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        2000
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE recurring_payments \nSET is_active = FALSE \nWHERE id = {{ $json.subscriptionId }} \n  AND user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\nRETURNING *;",
        "additionalFields": {}
      },
      "id": "cancel-subscription",
      "name": "Cancel Subscription",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        2000
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Subscription cancelled', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-cancel-sub",
      "name": "Response Cancel Sub",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        2000
      ]
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.item.json.body.userId || 'unknown';\nconst filter = $input.item.json.body.data?.filter || 'all';\nreturn { userId, filter };"
      },
      "id": "prepare-notifications",
      "name": "Prepare Get Notifications",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        2200
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM notifications \nWHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\nORDER BY is_read ASC, \n  CASE priority \n    WHEN 'urgent' THEN 1 \n    WHEN 'high' THEN 2 \n    WHEN 'normal' THEN 3 \n    WHEN 'low' THEN 4 \n  END,\n  created_at DESC\nLIMIT 50;",
        "additionalFields": {}
      },
      "id": "get-notifications",
      "name": "Get Notifications",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        2200
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, data: $input.all() } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-notifications",
      "name": "Response Notifications",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        2200
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  userId: userId,\n  notificationId: data.notification_id\n};"
      },
      "id": "prepare-mark-read",
      "name": "Prepare Mark Read",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        2400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE notifications \nSET is_read = TRUE \nWHERE id = {{ $json.notificationId }} \n  AND user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\nRETURNING *;",
        "additionalFields": {}
      },
      "id": "mark-notification-read",
      "name": "Mark Notification Read",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        2400
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Notification marked as read' } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-mark-read",
      "name": "Response Mark Read",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        2400
      ]
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.item.json.body.userId || 'unknown';\nreturn { userId };"
      },
      "id": "prepare-mark-all",
      "name": "Prepare Mark All Read",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        2600
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=UPDATE notifications \nSET is_read = TRUE \nWHERE user_id = {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}\n  AND is_read = FALSE\nRETURNING COUNT(*) as updated_count;",
        "additionalFields": {}
      },
      "id": "mark-all-read",
      "name": "Mark All Read",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        2600
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'All notifications marked as read' } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-mark-all",
      "name": "Response Mark All",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        2600
      ]
    },
    {
      "parameters": {
        "jsCode": "const userId = $input.item.json.body.userId || 'unknown';\nreturn { userId };"
      },
      "id": "prepare-budget",
      "name": "Prepare Get Budget",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        2800
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=SELECT * FROM get_budget_forecast({{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }}::BIGINT);",
        "additionalFields": {}
      },
      "id": "get-budget-forecast",
      "name": "Get Budget Forecast",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        2800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-budget",
      "name": "Response Budget",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        2800
      ]
    },
    {
      "parameters": {
        "jsCode": "const data = $input.item.json.body.data;\nconst userId = $input.item.json.body.userId || 'unknown';\n\nreturn {\n  userId: userId,\n  warningThreshold: parseInt(data.warning_threshold) || 80,\n  criticalThreshold: parseInt(data.critical_threshold) || 100\n};"
      },
      "id": "prepare-alerts",
      "name": "Prepare Save Alerts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        3000
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "=INSERT INTO budget_alerts_config (user_id, warning_threshold, critical_threshold)\nVALUES (\n  {{ typeof $json.userId === 'number' ? $json.userId : parseInt($json.userId) }},\n  {{ $json.warningThreshold }},\n  {{ $json.criticalThreshold }}\n)\nON CONFLICT (user_id) \nDO UPDATE SET \n  warning_threshold = EXCLUDED.warning_threshold,\n  critical_threshold = EXCLUDED.critical_threshold,\n  updated_at = CURRENT_TIMESTAMP\nRETURNING *;",
        "additionalFields": {}
      },
      "id": "save-alert-settings",
      "name": "Save Alert Settings",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        600,
        3000
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "fFymVphշփշքդձգղճճճշ",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Alert settings saved', data: $json } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods",
                "value": "GET, POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "response-alerts",
      "name": "Response Alerts",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        800,
        3000
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch by Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch by Action": {
      "main": [
        [
          {
            "node": "Prepare Add Transaction",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Get Stats",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Get History",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Edit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Delete",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Restore",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Report",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Get Subscriptions",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Create Subscription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Cancel Subscription",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Get Notifications",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Mark Read",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Mark All Read",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Get Budget",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Save Alerts",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Add Transaction": {
      "main": [
        [
          {
            "node": "Insert Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Transaction": {
      "main": [
        [
          {
            "node": "Response Add",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Get Stats": {
      "main": [
        [
          {
            "node": "Get Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Stats": {
      "main": [
        [
          {
            "node": "Format Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Stats": {
      "main": [
        [
          {
            "node": "Response Stats",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Get History": {
      "main": [
        [
          {
            "node": "Get History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get History": {
      "main": [
        [
          {
            "node": "Response History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Edit": {
      "main": [
        [
          {
            "node": "Update Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Transaction": {
      "main": [
        [
          {
            "node": "Response Edit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Delete": {
      "main": [
        [
          {
            "node": "Delete Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Transaction": {
      "main": [
        [
          {
            "node": "Response Delete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Restore": {
      "main": [
        [
          {
            "node": "Restore Transaction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Restore Transaction": {
      "main": [
        [
          {
            "node": "Response Restore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Get Subscriptions": {
      "main": [
        [
          {
            "node": "Get Subscriptions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Subscriptions": {
      "main": [
        [
          {
            "node": "Response Subscriptions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Subscription": {
      "main": [
        [
          {
            "node": "Create Subscription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Subscription": {
      "main": [
        [
          {
            "node": "Response Create Sub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Cancel Subscription": {
      "main": [
        [
          {
            "node": "Cancel Subscription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cancel Subscription": {
      "main": [
        [
          {
            "node": "Response Cancel Sub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Get Notifications": {
      "main": [
        [
          {
            "node": "Get Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notifications": {
      "main": [
        [
          {
            "node": "Response Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Mark Read": {
      "main": [
        [
          {
            "node": "Mark Notification Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Notification Read": {
      "main": [
        [
          {
            "node": "Response Mark Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Mark All Read": {
      "main": [
        [
          {
            "node": "Mark All Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark All Read": {
      "main": [
        [
          {
            "node": "Response Mark All",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Get Budget": {
      "main": [
        [
          {
            "node": "Get Budget Forecast",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Budget Forecast": {
      "main": [
        [
          {
            "node": "Response Budget",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Save Alerts": {
      "main": [
        [
          {
            "node": "Save Alert Settings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Alert Settings": {
      "main": [
        [
          {
            "node": "Response Alerts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "pinData": {},
  "meta": {
    "instanceId": "your-instance-id"
  }
}